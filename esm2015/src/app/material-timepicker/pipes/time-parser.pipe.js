import { Inject, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
export class TimeParserPipe {
    constructor(locale) {
        this.locale = locale;
        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;
    }
    transform(time, timeUnit = TimeUnit.HOUR) {
        if (time == null || time === '') {
            return '';
        }
        if (!isNaN(+time)) {
            return time;
        }
        if (timeUnit === TimeUnit.MINUTE) {
            return this.parseTime(time, 'm', 'minute');
        }
        return this.parseTime(time, 'H', 'hour');
    }
    parseTime(time, format, timeMeasure) {
        const parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this.numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error(`Cannot parse time - ${time}`);
    }
}
TimeParserPipe.decorators = [
    { type: Pipe, args: [{
                name: 'timeParser'
            },] }
];
TimeParserPipe.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [TIME_LOCALE,] }] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1wYXJzZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9hcHAvbWF0ZXJpYWwtdGltZXBpY2tlci9waXBlcy90aW1lLXBhcnNlci5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQW1CLE1BQU0sT0FBTyxDQUFDO0FBT2xELE1BQU0sT0FBTyxjQUFjO0lBSXZCLFlBQXlDLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ25ELElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxlQUFrQyxDQUFDO0lBQzNILENBQUM7SUFFRCxTQUFTLENBQUMsSUFBcUIsRUFBRSxRQUFRLEdBQUcsUUFBUSxDQUFDLElBQUk7UUFDckQsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7WUFDN0IsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLFFBQVEsS0FBSyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFN0MsQ0FBQztJQUVPLFNBQVMsQ0FBQyxJQUFxQixFQUFFLE1BQWMsRUFBRSxXQUF3QjtRQUM3RSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxNQUFNLEVBQUUsRUFBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFbkgsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNwQixPQUFPLFVBQVUsQ0FBQztTQUNyQjtRQUVELE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksRUFBRSxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7O1lBcENKLElBQUksU0FBQztnQkFDRixJQUFJLEVBQUUsWUFBWTthQUNyQjs7O3lDQUtnQixNQUFNLFNBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBUSU1FX0xPQ0FMRSB9IGZyb20gJy4uL3Rva2Vucy90aW1lLWxvY2FsZS50b2tlbic7XHJcbmltcG9ydCB7IFRpbWVVbml0IH0gZnJvbSAnLi4vbW9kZWxzL3RpbWUtdW5pdC5lbnVtJztcclxuaW1wb3J0IHsgRGF0ZVRpbWUsIE51bWJlcmluZ1N5c3RlbSB9IGZyb20gJ2x1eG9uJztcclxuXHJcbnR5cGUgVGltZU1lYXN1cmUgPSAnaG91cicgfCAnbWludXRlJztcclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICd0aW1lUGFyc2VyJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGltZVBhcnNlclBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBwcml2YXRlIG51bWJlcmluZ1N5c3RlbTogTnVtYmVyaW5nU3lzdGVtO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVElNRV9MT0NBTEUpIHByaXZhdGUgbG9jYWxlOiBzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9IERhdGVUaW1lLmxvY2FsKCkuc2V0TG9jYWxlKHRoaXMubG9jYWxlKS5yZXNvbHZlZExvY2FsZU9wdHMoKS5udW1iZXJpbmdTeXN0ZW0gYXMgTnVtYmVyaW5nU3lzdGVtO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYW5zZm9ybSh0aW1lOiBzdHJpbmcgfCBudW1iZXIsIHRpbWVVbml0ID0gVGltZVVuaXQuSE9VUik6IG51bWJlciB8IHN0cmluZyB7XHJcbiAgICAgICAgaWYgKHRpbWUgPT0gbnVsbCB8fCB0aW1lID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKCt0aW1lKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGltZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aW1lVW5pdCA9PT0gVGltZVVuaXQuTUlOVVRFKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGltZSh0aW1lLCAnbScsICdtaW51dGUnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnBhcnNlVGltZSh0aW1lLCAnSCcsICdob3VyJyk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcGFyc2VUaW1lKHRpbWU6IHN0cmluZyB8IG51bWJlciwgZm9ybWF0OiBzdHJpbmcsIHRpbWVNZWFzdXJlOiBUaW1lTWVhc3VyZSk6IG51bWJlciB7XHJcbiAgICAgICAgY29uc3QgcGFyc2VkVGltZSA9IERhdGVUaW1lLmZyb21Gb3JtYXQoU3RyaW5nKHRpbWUpLCBmb3JtYXQsIHtudW1iZXJpbmdTeXN0ZW06IHRoaXMubnVtYmVyaW5nU3lzdGVtfSlbdGltZU1lYXN1cmVdO1xyXG5cclxuICAgICAgICBpZiAoIWlzTmFOKHBhcnNlZFRpbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJzZWRUaW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgcGFyc2UgdGltZSAtICR7dGltZX1gKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19