{"version":3,"sources":["../../src/app/material-timepicker/models/time-unit.enum.ts","../../src/app/material-timepicker/models/time-period.enum.ts","../../src/app/material-timepicker/models/time-format.enum.ts","../../src/app/material-timepicker/utils/timepicker.utils.ts","../../src/app/material-timepicker/services/time-adapter.ts","../../src/app/material-timepicker/services/ngx-material-timepicker.service.ts","../../src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","../../src/app/material-timepicker/ngx-material-timepicker.component.ts","../../src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","../../src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","../../src/app/material-timepicker/tokens/time-locale.token.ts","../../src/app/material-timepicker/directives/ngx-timepicker.directive.ts","../../src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","../../node_modules/tslib/tslib.es6.js","../../src/app/material-timepicker/utils/timepicker-time.utils.ts","../../src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","../../src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","../../src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","../../src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","../../src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","../../src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","../../src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","../../src/app/material-timepicker/pipes/time-parser.pipe.ts","../../src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","../../src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","../../src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","../../src/app/material-timepicker/pipes/time-formatter.pipe.ts","../../src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","../../src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","../../src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","../../src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","../../src/app/material-timepicker/pipes/time-localizer.pipe.ts","../../src/app/material-timepicker/pipes/active-hour.pipe.ts","../../src/app/material-timepicker/pipes/active-minute.pipe.ts","../../src/app/material-timepicker/directives/autofocus.directive.ts","../../src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["TimeUnit","TimePeriod","TimeFormat","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","n","keyCode","ctrlKey","metaKey","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","length","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","setLocale","DEFAULT_LOCALE","toLocaleString","Object","assign","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","toLocaleTimeString","DEFAULT_FORMAT","_b","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","this","minutes","minute","Error","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","AnimationState","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","defineProperty","prototype","next","asObservable","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","getValue","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","Injectable","args","providedIn","NgxMaterialTimepickerContentComponent","timepickerService","timeUnit","activeTimeUnit","HOUR","unsubscribe","Subject","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedHour","pipe","shareReplay","bufferSize","refCount","selectedMinute","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onHourSelected","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","event","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","Input","NgxMaterialTimepickerComponent","overlay","vcr","isEsc","positions","originX","originY","overlayX","overlayY","subscriptions","Subscription","EventEmitter","opened","closed","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","registerInput","input","elementRef","open","_this","positionStrategy","position","flexibleConnectedTo","withPositions","overlayRef","create","panelClass","hasBackdrop","disposeOnNavigation","add","keydownEvents","undefined","key","detach","backdropClick","detachments","ngxMaterialTimepickerContentComponentPortal","ComponentPortal","ngxMaterialTimepickerContentComponent","attach","instance","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","updateTime","encapsulation","ViewEncapsulation","None","Overlay","ViewContainerRef","ViewChild","static","Output","Directive","NgxMaterialTimepickerToggleComponent","_disabled","timepicker","stopPropagation","ContentChild","NgxMaterialTimepickerToggleIconDirective","TIME_LOCALE","InjectionToken","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","forEach","s","push","nativeElement","host","[disabled]","(input)","(blur)","ElementRef","Inject","HostListener","NgxMaterialTimepickerThemeDirective","renderer","element","ngAfterViewInit","theme","setTheme","val","hasOwnProperty","prop","setStyle","replace","toLowerCase","Renderer2","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","__extends","__","constructor","fill","map","v","i","disableHours","hours","config","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","call","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","type","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","step","round","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","parsedTime","String","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","timeChanged","focused","unfocused","timeList","t","saveTimeAndChangeTimeUnit","previousTime","onKeyDown","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","TimeFormatterPipe","MinutesFormatterPipe","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","timepickerTime","_defaultTime","isDefaultTime","period$","h","changeTime","m","onTimeSet","localeTime","NgxTimepickerTimeControlComponent","timeParser","isDefaultTimeSet","timeChanges","isFirstChange","onKeydown","increase","decrease","emit","onFocus","isFocused","onBlur","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","ActiveHourPipe","ActiveMinutePipe","currentMinute","AutofocusDirective","document","activeElement","isFocusActive","focus","preventScroll","Optional","DOCUMENT","NgxMaterialTimepickerModule","ngModule","useValue","NgModule","imports","CommonModule","FormsModule","PortalModule","OverlayModule","exports","declarations","NgxMaterialTimepickerButtonComponent","ɵ0","entryComponents"],"mappings":"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","sourcesContent":["export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWELVE_SHORT = 'h:m a',\r\n    TWENTY_FOUR = 'HH:mm',\r\n    TWENTY_FOUR_SHORT = 'H:m'\r\n}\r\n","/* tslint:disable */\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n    if (unit === 'hours') {\r\n        return time.hour >= compareWith.hour;\r\n    }\r\n    if (unit === 'minutes') {\r\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n    }\r\n}\r\n\r\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n    if (unit === 'hours') {\r\n        return time.hour <= compareWith.hour;\r\n    }\r\n    if (unit === 'minutes') {\r\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n    }\r\n}\r\n\r\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n    if (unit === 'hours') {\r\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\r\n    }\r\n    if (unit === 'minutes') {\r\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\r\n    }\r\n}\r\n\r\nexport function isDigit(e: KeyboardEvent) {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n}\r\n","import { DateTime, DateTimeFormatOptions, LocaleOptions, NumberingSystem } from 'luxon';\r\n\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\r\nimport { TimeOptions } from '../models/time-options.interface';\r\n\r\n// @dynamic\r\nexport class TimeAdapter {\r\n    static DEFAULT_FORMAT = 12;\r\n    static DEFAULT_LOCALE = 'en-US';\r\n    static DEFAULT_NUMBERING_SYSTEM: NumberingSystem = 'latn';\r\n\r\n    static parseTime(time: string, opts: TimeOptions): DateTime {\r\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\r\n        const isPeriodExist = time.split(' ').length === 2;\r\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\r\n    }\r\n\r\n    static formatTime(time: string, opts: TimeOptions): string {\r\n        const {format} = opts;\r\n\r\n        return TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE)\r\n            .toLocaleString({\r\n                ...DateTime.TIME_SIMPLE,\r\n                hour12: format !== 24,\r\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\r\n            });\r\n    }\r\n\r\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\r\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\r\n        const timeFormat: DateTimeFormatOptions = {...DateTime.TIME_SIMPLE, hour12: format !== 24};\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\r\n    }\r\n\r\n    static isTimeAvailable(\r\n        time: string,\r\n        min?: DateTime,\r\n        max?: DateTime,\r\n        granularity?: 'hours' | 'minutes',\r\n        minutesGap?: number,\r\n        format?: number\r\n    ): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n\r\n        const convertedTime = this.parseTime(time, {format});\r\n        const minutes = convertedTime.minute;\r\n\r\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && isSameOrBefore(convertedTime, max, granularity);\r\n        const between = (min && max)\r\n            && isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || between || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n\r\n    static fromDateTimeToString(time: DateTime, format: number): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n\r\n        return time.reconfigure({\r\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\r\n            locale: TimeAdapter.DEFAULT_LOCALE\r\n        }).toFormat(timeFormat);\r\n    }\r\n\r\n    private static getLocaleOptionsByTime(time: string, opts: LocaleOptions): LocaleOptions {\r\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\r\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem as NumberingSystem, locale};\r\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\r\n\r\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { TimeAdapter } from './time-adapter';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\r\n\r\n        if (isPeriodValid) {\r\n            this.periodSubject.next(period);\r\n        }\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\r\n                this.setDefaultTime(time, format);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n        const time = `${hour}:${minute} ${period}`.trim();\r\n\r\n        return TimeAdapter.formatTime(time, {format});\r\n    }\r\n\r\n    private setDefaultTime(time: string, format: number) {\r\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\r\n\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n\r\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = period as TimePeriod;\r\n\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\r\n    switch (period) {\r\n        case TimePeriod.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case TimePeriod.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n","import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { shareReplay, takeUntil } from 'rxjs/operators';\r\nimport { TimeAdapter } from '../../services/time-adapter';\r\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\r\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-content',\r\n    templateUrl: './ngx-material-timepicker-content.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-content.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerContentComponent implements OnInit, OnDestroy, TimepickerConfig {\r\n\r\n    selectedHour: Observable<ClockFaceTime>;\r\n    selectedMinute: Observable<ClockFaceTime>;\r\n    selectedPeriod: Observable<TimePeriod>;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    animationState: AnimationState;\r\n\r\n    cancelBtnTmpl: TemplateRef<Node>;\r\n    editableHintTmpl: TemplateRef<Node>;\r\n    confirmBtnTmpl: TemplateRef<Node>;\r\n\r\n    enableKeyboardInput: boolean;\r\n    preventOverlayClick: boolean;\r\n    disableAnimation: boolean;\r\n    disabled: boolean;\r\n\r\n    format: number;\r\n    minutesGap: number;\r\n\r\n    minTime: DateTime;\r\n    maxTime: DateTime;\r\n    time: string;\r\n\r\n    timepickerBaseRef: TimepickerRef;\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this.setDefaultTime(time);\r\n    }\r\n\r\n    private unsubscribe = new Subject();\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\r\n\r\n        this.defineTime();\r\n\r\n        this.selectedHour = this.timepickerService.selectedHour\r\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n\r\n        this.selectedMinute = this.timepickerService.selectedMinute\r\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n\r\n        this.selectedPeriod = this.timepickerService.selectedPeriod\r\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n\r\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\r\n            .subscribe(this.setDefaultTime.bind(this));\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onHourSelected(hour: number): void {\r\n        this.changeTimeUnit(TimeUnit.MINUTE);\r\n        this.timepickerBaseRef.hourSelected.next(hour);\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime(): void {\r\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    close(): void {\r\n        if (this.disableAnimation) {\r\n            this.timepickerBaseRef.close();\r\n            return;\r\n        }\r\n\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.timepickerBaseRef.close();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n\r\n    private setDefaultTime(time: string): void {\r\n        this.timepickerService.setDefaultTimeIfAvailable(\r\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\r\n    }\r\n\r\n    private defineTime(): void {\r\n        const minTime = this.minTime;\r\n\r\n        if (minTime && !this.time) {\r\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\r\n\r\n            this.setDefaultTime(time);\r\n        }\r\n    }\r\n\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ElementRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  OnDestroy,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { DateTime } from 'luxon';\r\nimport {\r\n  NgxMaterialTimepickerContentComponent\r\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\r\nimport { TimepickerRef } from './models/timepicker-ref.interface';\r\nimport { ComponentPortal } from '@angular/cdk/portal';\r\nimport { Overlay, OverlayRef, ConnectedPosition } from '@angular/cdk/overlay';\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n  selector: 'ngx-material-timepicker',\r\n  templateUrl: 'ngx-material-timepicker.component.html',\r\n  styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxMaterialTimepickerComponent implements TimepickerRef, OnDestroy {\r\n  timeUpdated = new Subject<string>();\r\n  @ViewChild('pickerTmpl', { static: true }) pickerTmpl: TemplateRef<any>;\r\n  @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n  @Input() editableHintTmpl: TemplateRef<Node>;\r\n  @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n  @Input('ESC') isEsc = true;\r\n  @Input() enableKeyboardInput: boolean;\r\n  @Input() preventOverlayClick: boolean;\r\n  @Input() disableAnimation: boolean;\r\n  @Input() defaultTime: string;\r\n  @Input() trigger: ElementRef;\r\n  @Input() panelClass: string;\r\n  @Input() positions: ConnectedPosition[] = [{ originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' }];\r\n  overlayRef: OverlayRef;\r\n  overlayDetachmentsSubscription: any;\r\n  overlayBackdropClickSubscription: any;\r\n  overlayKeyDownSubscription: any;\r\n  subscriptions = new Subscription();\r\n\r\n  @Input()\r\n  set format(value: number) {\r\n    this._format = value === 24 ? 24 : 12;\r\n  }\r\n\r\n  get format(): number {\r\n    return this.timepickerInput ? this.timepickerInput.format : this._format;\r\n  }\r\n\r\n  @Input()\r\n  set minutesGap(gap: number) {\r\n    if (gap == null) {\r\n      return;\r\n    }\r\n    gap = Math.floor(gap);\r\n    this._minutesGap = gap <= 59 ? gap : 1;\r\n  }\r\n\r\n  get minutesGap(): number {\r\n    return this._minutesGap;\r\n  }\r\n\r\n  @Output() timeSet = new EventEmitter<string>();\r\n  @Output() opened = new EventEmitter<null>();\r\n  @Output() closed = new EventEmitter<null>();\r\n  @Output() hourSelected = new EventEmitter<number>();\r\n\r\n  private _minutesGap: number;\r\n  private _format: number;\r\n  private timepickerInput: TimepickerDirective;\r\n\r\n  constructor(private overlay: Overlay, private vcr: ViewContainerRef) {\r\n  }\r\n\r\n  get minTime(): DateTime {\r\n    return this.timepickerInput && (this.timepickerInput.min as DateTime);\r\n  }\r\n\r\n  get maxTime(): DateTime {\r\n    return this.timepickerInput && (this.timepickerInput.max as DateTime);\r\n  }\r\n\r\n  get disabled(): boolean {\r\n    return this.timepickerInput && this.timepickerInput.disabled;\r\n  }\r\n\r\n  get time(): string {\r\n    return this.timepickerInput && this.timepickerInput.value;\r\n  }\r\n\r\n  /***\r\n   * Register an input with this timepicker.\r\n   * input - The timepicker input to register with this timepicker\r\n   */\r\n  registerInput(input: TimepickerDirective): void {\r\n    if (this.timepickerInput) {\r\n      throw Error('A Timepicker can only be associated with a single input.');\r\n    }\r\n\r\n    this.timepickerInput = input;\r\n    this.trigger = input.elementRef;\r\n  }\r\n\r\n  open(): void {\r\n\r\n    const positionStrategy = this.overlay\r\n      .position()\r\n      .flexibleConnectedTo(this.trigger)\r\n      .withPositions(this.positions);\r\n\r\n    this.overlayRef = this.overlay.create({\r\n      panelClass: this.panelClass,\r\n      hasBackdrop: true,\r\n      positionStrategy: positionStrategy,\r\n      disposeOnNavigation: true,\r\n    });\r\n\r\n    this.subscriptions.add(this.overlayRef\r\n      .keydownEvents()\r\n      .subscribe((event: KeyboardEvent) => {\r\n        if (event.key !== undefined) {\r\n          if (event.key === 'Escape') {\r\n            this.overlayRef.detach();\r\n          }\r\n        } else {\r\n          // tslint:disable-next-line:deprecation\r\n          if (event.keyCode === ESCAPE) {\r\n            this.overlayRef.detach();\r\n          }\r\n        }\r\n      }));\r\n\r\n    this.subscriptions.add(this.overlayRef.backdropClick().subscribe((event: MouseEvent) => {\r\n      this.overlayRef.detach();\r\n    }));\r\n\r\n    this.subscriptions.add(this.overlayRef.detachments().subscribe(() => {\r\n      this.closed.next();\r\n    }));\r\n\r\n    const ngxMaterialTimepickerContentComponentPortal = new ComponentPortal(NgxMaterialTimepickerContentComponent, this.vcr);\r\n\r\n    const ngxMaterialTimepickerContentComponent = this.overlayRef.attach(ngxMaterialTimepickerContentComponentPortal);\r\n\r\n    ngxMaterialTimepickerContentComponent.instance.timepickerBaseRef = this;\r\n    ngxMaterialTimepickerContentComponent.instance.time = this.time;\r\n    ngxMaterialTimepickerContentComponent.instance.defaultTime = this.defaultTime;\r\n    ngxMaterialTimepickerContentComponent.instance.maxTime = this.maxTime;\r\n    ngxMaterialTimepickerContentComponent.instance.minTime = this.minTime;\r\n    ngxMaterialTimepickerContentComponent.instance.format = this.format;\r\n    ngxMaterialTimepickerContentComponent.instance.minutesGap = this.minutesGap;\r\n    ngxMaterialTimepickerContentComponent.instance.disableAnimation = this.disableAnimation;\r\n    ngxMaterialTimepickerContentComponent.instance.cancelBtnTmpl = this.cancelBtnTmpl;\r\n    ngxMaterialTimepickerContentComponent.instance.confirmBtnTmpl = this.confirmBtnTmpl;\r\n    ngxMaterialTimepickerContentComponent.instance.editableHintTmpl = this.editableHintTmpl;\r\n    ngxMaterialTimepickerContentComponent.instance.disabled = this.disabled;\r\n    ngxMaterialTimepickerContentComponent.instance.enableKeyboardInput = this.enableKeyboardInput;\r\n    ngxMaterialTimepickerContentComponent.instance.preventOverlayClick = this.preventOverlayClick;\r\n    this.opened.next();\r\n  }\r\n\r\n  close(): void {\r\n    this.overlayRef.detach();\r\n  }\r\n\r\n  updateTime(time: string): void {\r\n    this.timeUpdated.next(time);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale');\r\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { DateTime } from 'luxon';\r\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    // tslint:disable-next-line\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this.value = this._value;\r\n            this._timepicker.updateTime(this._value);\r\n        }\r\n        this.previousFormat = this._format;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | DateTime;\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | DateTime;\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\r\n        const isAvailable = TimeAdapter.isTimeAvailable(\r\n            time,\r\n            <DateTime>this._min,\r\n            <DateTime>this._max,\r\n            'minutes',\r\n            this._timepicker.minutesGap,\r\n            this._format\r\n        );\r\n\r\n        if (isAvailable) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        if (!this._value) {\r\n            return '';\r\n        }\r\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    private previousFormat: number;\r\n\r\n    onTouched = () => {\r\n    }\r\n\r\n    private onChange: (value: any) => void = () => {\r\n    }\r\n\r\n    constructor(public elementRef: ElementRef,\r\n                @Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this.value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {AfterViewInit, Directive, ElementRef, Input, Renderer2} from '@angular/core';\r\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\r\n\r\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\r\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\r\n\r\n    private element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef, private renderer: Renderer2) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.renderer.setStyle(this.element, `--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nexport function getHours(format: number): ClockFaceTime[] {\r\n    return Array(format).fill(1).map((v, i) => {\r\n        const angleStep = 30;\r\n        const time = v + i;\r\n        const angle = angleStep * time;\r\n        return {time: time === 24 ? 0 : time, angle};\r\n    });\r\n}\r\n\r\nexport function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n    if (config.min || config.max) {\r\n\r\n        return hours.map(value => {\r\n            const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\r\n            const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\r\n\r\n            return {\r\n                ...value,\r\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n            };\r\n        });\r\n    }\r\n    return hours;\r\n}\r\n\r\nexport function getMinutes(gap = 1): ClockFaceTime[] {\r\n    const minutesCount = 60;\r\n    const angleStep = 360 / minutesCount;\r\n    const minutes = [];\r\n\r\n    for (let i = 0; i < minutesCount; i++) {\r\n        const angle = angleStep * i;\r\n        if (i % gap === 0) {\r\n            minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n        }\r\n    }\r\n    return minutes;\r\n}\r\n\r\nexport function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n    if (config.min || config.max) {\r\n\r\n        const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n        return minutes.map(value => {\r\n            const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\r\n\r\n            return {\r\n                ...value,\r\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n            };\r\n        });\r\n    }\r\n    return minutes;\r\n}\r\n","import { EventEmitter, Input, Output, Directive } from '@angular/core';\r\nimport { DateTime } from 'luxon';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { getHours } from '../../utils/timepicker-time.utils';\r\n\r\n\r\n@Directive()\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = getHours(format);\r\n    }\r\n\r\n    onTimeSelected(time: number): void {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport { disableHours } from '../../utils/timepicker-time.utils';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { disableHours } from '../../utils/timepicker-time.utils';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { DateTime } from 'luxon';\r\nimport { disableMinutes, getMinutes } from '../../utils/timepicker-time.utils';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<number>();\r\n\r\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\r\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    TemplateRef\r\n} from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { DateTime, Info } from 'luxon';\r\nimport { disableHours, disableMinutes, getHours, getMinutes } from '../../utils/timepicker-time.utils';\r\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n    meridiems = Info.meridiems({locale: this.locale});\r\n\r\n    isHintVisible: boolean;\r\n\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = getHours(this.format);\r\n\r\n            this.hours = disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n\r\n            this.minutes = disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n\r\n    showHint(): void {\r\n        this.isHintVisible = true;\r\n    }\r\n\r\n    hideHint(): void {\r\n        this.isHintVisible = false;\r\n    }\r\n}\r\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\r\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime, NumberingSystem } from 'luxon';\r\n\r\ntype TimeMeasure = 'hour' | 'minute';\r\n\r\n@Pipe({\r\n    name: 'timeParser'\r\n})\r\nexport class TimeParserPipe implements PipeTransform {\r\n\r\n    private numberingSystem: NumberingSystem;\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\r\n    }\r\n\r\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\r\n        if (time == null || time === '') {\r\n            return '';\r\n        }\r\n\r\n        if (!isNaN(+time)) {\r\n            return time;\r\n        }\r\n\r\n        if (timeUnit === TimeUnit.MINUTE) {\r\n            return this.parseTime(time, 'm', 'minute');\r\n        }\r\n\r\n        return this.parseTime(time, 'H', 'hour');\r\n\r\n    }\r\n\r\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\r\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\r\n\r\n        if (!isNaN(parsedTime)) {\r\n            return parsedTime;\r\n        }\r\n\r\n        throw new Error(`Cannot parse time - ${time}`);\r\n    }\r\n\r\n}\r\n","/* tslint:disable:triple-equals */\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { isDigit } from '../../utils/timepicker.utils';\r\nimport { TimeParserPipe } from '../../pipes/time-parser.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\r\n    providers: [TimeParserPipe]\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() focused = new EventEmitter<null>();\r\n    @Output() unfocused = new EventEmitter<null>();\r\n\r\n    constructor(private timeParserPipe: TimeParserPipe) {\r\n    }\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isDigit(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isDigit(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + (this.minutesGap || 1));\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - (this.minutesGap || 1));\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\r\nimport { DateTime } from 'luxon';\r\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.utils';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() selectedHour: number | string;\r\n    @Input() meridiems: string[];\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number | string, timeUnit: TimeUnit): any {\r\n        if (time == null || time === '') {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\r\n            case TimeUnit.MINUTE:\r\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import { Component, forwardRef, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { getHours, getMinutes } from '../../utils/timepicker-time.utils';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { TimeAdapter } from '../../services/time-adapter';\r\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\r\n\r\n@Component({\r\n    selector: 'ngx-timepicker-field',\r\n    templateUrl: './ngx-timepicker-field.component.html',\r\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\r\n    providers: [\r\n        NgxMaterialTimepickerService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NgxTimepickerFieldComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n    period$: Observable<TimePeriod>;\r\n\r\n    hour: number;\r\n    minute: number;\r\n\r\n    minHour = 1;\r\n    maxHour = 12;\r\n\r\n    timeUnit = TimeUnit;\r\n    timepickerTime: string;\r\n    isDefaultTime: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\r\n    @Input() buttonAlign: 'right' | 'left' = 'right';\r\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\r\n    @Input() controlOnly: boolean;\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        this.minHour = this._format === 12 ? 1 : 0;\r\n        this.maxHour = this._format === 12 ? 12 : 23;\r\n        this.hoursList = getHours(this._format);\r\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this.defaultTime = this.timepickerTime;\r\n        }\r\n        this.previousFormat = this._format;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n\r\n    @Input()\r\n    set defaultTime(val: string) {\r\n        const time = TimeAdapter.formatTime(val, {locale: this.locale, format: this._format});\r\n        this.timepickerService.setDefaultTimeIfAvailable(time, null, null, this._format);\r\n        this._defaultTime = time;\r\n        this.timepickerTime = time;\r\n        this.isDefaultTime = !!time;\r\n    }\r\n\r\n    get defaultTime(): string {\r\n        return this._defaultTime;\r\n    }\r\n\r\n    private _defaultTime: string;\r\n    private _format = 12;\r\n    private previousFormat: number;\r\n\r\n    private hoursList: ClockFaceTime[];\r\n    private minutesList: ClockFaceTime[];\r\n\r\n    private unsubscribe$ = new Subject();\r\n\r\n    private onChange: (value: string) => void = () => {\r\n    }\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                @Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.period$ = this.timepickerService.selectedPeriod;\r\n\r\n        this.timepickerService.selectedHour.pipe(takeUntil(this.unsubscribe$))\r\n            .subscribe(hour => this.hour = hour.time);\r\n\r\n        this.timepickerService.selectedMinute.pipe(takeUntil(this.unsubscribe$))\r\n            .subscribe(minute => this.minute = minute.time);\r\n\r\n        this.hoursList = getHours(this._format);\r\n        this.minutesList = getMinutes();\r\n    }\r\n\r\n    writeValue(val: string): void {\r\n        if (val) {\r\n            this.defaultTime = val;\r\n        }\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    changeHour(hour: number): void {\r\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\r\n        this.changeTime();\r\n    }\r\n\r\n    changeMinute(minute: number): void {\r\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\r\n        this.changeTime();\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n        this.changeTime();\r\n    }\r\n\r\n    onTimeSet(time: string): void {\r\n        const localeTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\r\n\r\n        this.defaultTime = time;\r\n        this.onChange(localeTime);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe$.next();\r\n    }\r\n\r\n    private changeTime(): void {\r\n        const time = this.timepickerService.getFullTime(this._format);\r\n        this.timepickerTime = time;\r\n        this.onChange(time);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { isDigit } from '../../../utils/timepicker.utils';\r\nimport { TimeFormatterPipe } from '../../../pipes/time-formatter.pipe';\r\nimport { TimeUnit } from '../../../models/time-unit.enum';\r\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-timepicker-time-control',\r\n    templateUrl: './ngx-timepicker-time-control.component.html',\r\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [TimeParserPipe]\r\n})\r\n\r\nexport class NgxTimepickerTimeControlComponent implements OnInit, OnChanges {\r\n\r\n    @Input() time: number;\r\n    @Input() min: number;\r\n    @Input() max: number;\r\n    @Input() placeholder: string;\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() disabled: boolean;\r\n    @Input() isDefaultTimeSet: boolean;\r\n\r\n    @Output() timeChanged = new EventEmitter<number>();\r\n\r\n    isFocused: boolean;\r\n\r\n    constructor(private timeParser: TimeParserPipe) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.isDefaultTimeSet) {\r\n            this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const timeChanges = changes['time'];\r\n        const isTimeNotProvided = timeChanges && timeChanges.isFirstChange() && !this.isDefaultTimeSet;\r\n\r\n        if (isTimeNotProvided) {\r\n            this.time = null;\r\n        }\r\n    }\r\n\r\n    onKeydown(event: KeyboardEvent): void {\r\n        if (!isDigit(event)) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                this.increase();\r\n                break;\r\n            case 'ArrowDown':\r\n                this.decrease();\r\n                break;\r\n        }\r\n    }\r\n\r\n    increase(): void {\r\n        if (!this.disabled) {\r\n            let nextTime = +this.time + 1;\r\n\r\n            if (nextTime > this.max) {\r\n                nextTime = this.min;\r\n            }\r\n\r\n            this.timeChanged.emit(nextTime);\r\n        }\r\n    }\r\n\r\n    decrease(): void {\r\n        if (!this.disabled) {\r\n            let previousTime = +this.time - 1;\r\n\r\n            if (previousTime < this.min) {\r\n                previousTime = this.max;\r\n            }\r\n\r\n            this.timeChanged.emit(previousTime);\r\n        }\r\n    }\r\n\r\n    onInput(input: HTMLInputElement) {\r\n        const value = parseInt(input.value, 10);\r\n\r\n        if (!isNaN(value)) {\r\n            this.time = value;\r\n\r\n            if (this.time > this.max) {\r\n                this.time = +String(value)[0];\r\n            }\r\n\r\n            if (this.time < this.min) {\r\n                this.time = this.min;\r\n            }\r\n\r\n            input.value = String(this.time);\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n\r\n    }\r\n\r\n    onFocus(): void {\r\n        this.isFocused = true;\r\n    }\r\n\r\n    onBlur(): void {\r\n        this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\r\n        this.isFocused = false;\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = +this.timeParser.transform(value, this.timeUnit);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\nimport { TimePeriod } from '../../../models/time-period.enum';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\r\nimport { Info } from 'luxon';\r\n\r\n@Component({\r\n    selector: 'ngx-timepicker-period-selector',\r\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\r\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)', opacity: 0}),\r\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\r\n            ]),\r\n            transition(':leave', [\r\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ]\r\n})\r\n\r\nexport class NgxTimepickerPeriodSelectorComponent {\r\n\r\n    @Input() isOpened: boolean;\r\n    @Input() disabled: boolean;\r\n    @Input()\r\n    set selectedPeriod(period: TimePeriod) {\r\n        if (period) {\r\n            const periods = [TimePeriod.AM, TimePeriod.PM];\r\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\r\n        }\r\n    }\r\n\r\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\r\n\r\n    period = TimePeriod;\r\n    meridiems = Info.meridiems({locale: this.locale});\r\n    localizedPeriod: string;\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    open(): void {\r\n        if (!this.disabled) {\r\n            this.isOpened = true;\r\n        }\r\n    }\r\n\r\n    select(period: TimePeriod): void {\r\n        this.periodSelected.next(period);\r\n        this.isOpened = false;\r\n    }\r\n\r\n    backdropClick(): void {\r\n        this.isOpened = false;\r\n    }\r\n}\r\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\r\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\n\r\ntype TimeMeasure = 'hour' | 'minute';\r\n\r\n@Pipe({\r\n    name: 'timeLocalizer'\r\n})\r\nexport class TimeLocalizerPipe implements PipeTransform {\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    transform(time: number | string, timeUnit: TimeUnit): string {\r\n        if (time == null || time === '') {\r\n            return '';\r\n        }\r\n\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR: {\r\n                const format = time === 0 ? 'HH' : 'H';\r\n                return this.formatTime('hour', time, format);\r\n            }\r\n            case TimeUnit.MINUTE:\r\n                return this.formatTime('minute', time, 'mm');\r\n            default:\r\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\r\n        }\r\n    }\r\n\r\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\r\n        try {\r\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\r\n        } catch {\r\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeHour'\r\n})\r\nexport class ActiveHourPipe implements PipeTransform {\r\n\r\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\r\n        if (hour == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n\r\n        return hour === currentHour;\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeMinute'\r\n})\r\nexport class ActiveMinutePipe implements PipeTransform {\r\n\r\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\r\n        if (minute == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        const defaultGap = 5;\r\n\r\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\r\n    }\r\n\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\r\nimport {\r\n  NgxMaterialTimepicker24HoursFaceComponent\r\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {\r\n  NgxMaterialTimepicker12HoursFaceComponent\r\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {\r\n  NgxMaterialTimepickerMinutesFaceComponent\r\n} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {\r\n  NgxMaterialTimepickerDialControlComponent\r\n} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\r\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\r\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\r\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\r\nimport {\r\n  NgxTimepickerTimeControlComponent\r\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\r\nimport {\r\n  NgxTimepickerPeriodSelectorComponent\r\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\r\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\r\nimport { TIME_LOCALE } from './tokens/time-locale.token';\r\nimport { TimeAdapter } from './services/time-adapter';\r\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\r\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\r\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\r\nimport {\r\n  NgxMaterialTimepickerContentComponent\r\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    PortalModule,\r\n    OverlayModule\r\n  ],\r\n  exports: [\r\n    NgxMaterialTimepickerComponent,\r\n    NgxMaterialTimepickerToggleComponent,\r\n    NgxTimepickerFieldComponent,\r\n    TimepickerDirective,\r\n    NgxMaterialTimepickerToggleIconDirective,\r\n    NgxMaterialTimepickerThemeDirective\r\n  ],\r\n  declarations: [\r\n    AutofocusDirective,\r\n    NgxMaterialTimepickerComponent,\r\n    NgxMaterialTimepicker24HoursFaceComponent,\r\n    NgxMaterialTimepicker12HoursFaceComponent,\r\n    NgxMaterialTimepickerMinutesFaceComponent,\r\n    NgxMaterialTimepickerFaceComponent,\r\n    NgxMaterialTimepickerToggleComponent,\r\n    NgxMaterialTimepickerButtonComponent,\r\n    NgxMaterialTimepickerDialComponent,\r\n    NgxMaterialTimepickerDialControlComponent,\r\n    NgxMaterialTimepickerPeriodComponent,\r\n    StyleSanitizerPipe,\r\n    TimeFormatterPipe,\r\n    TimepickerDirective,\r\n    NgxMaterialTimepickerToggleIconDirective,\r\n    MinutesFormatterPipe,\r\n    NgxMaterialTimepickerThemeDirective,\r\n    NgxTimepickerFieldComponent,\r\n    NgxTimepickerTimeControlComponent,\r\n    NgxTimepickerPeriodSelectorComponent,\r\n    TimeLocalizerPipe,\r\n    TimeParserPipe,\r\n    ActiveHourPipe,\r\n    ActiveMinutePipe,\r\n    NgxMaterialTimepickerContentComponent\r\n  ],\r\n  providers: [\r\n    { provide: TIME_LOCALE, useValue: TimeAdapter.DEFAULT_LOCALE }\r\n  ],\r\n  entryComponents: [NgxMaterialTimepickerContentComponent]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n\r\n  static setLocale(locale: string): ModuleWithProviders<NgxMaterialTimepickerModule> {\r\n    return {\r\n      ngModule: NgxMaterialTimepickerModule,\r\n      providers: [\r\n        { provide: TIME_LOCALE, useValue: locale }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}