import * as tslib_1 from "tslib";
import { Inject, Pipe } from '@angular/core';
import { TIME_LOCALE } from '../tokens/time-locale.token';
import { TimeUnit } from '../models/time-unit.enum';
import { DateTime } from 'luxon';
var TimeParserPipe = /** @class */ (function () {
    function TimeParserPipe(locale) {
        this.locale = locale;
        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem;
    }
    TimeParserPipe.prototype.transform = function (time, timeUnit) {
        if (timeUnit === void 0) { timeUnit = TimeUnit.HOUR; }
        if (time == null || time === '') {
            return '';
        }
        if (!isNaN(+time)) {
            return time;
        }
        if (timeUnit === TimeUnit.MINUTE) {
            return this.parseTime(time, 'm', 'minute');
        }
        return this.parseTime(time, 'H', 'hour');
    };
    TimeParserPipe.prototype.parseTime = function (time, format, timeMeasure) {
        var parsedTime = DateTime.fromFormat(String(time), format, { numberingSystem: this.numberingSystem })[timeMeasure];
        if (!isNaN(parsedTime)) {
            return parsedTime;
        }
        throw new Error("Cannot parse time - " + time);
    };
    TimeParserPipe = tslib_1.__decorate([
        Pipe({
            name: 'timeParser'
        }),
        tslib_1.__param(0, Inject(TIME_LOCALE)),
        tslib_1.__metadata("design:paramtypes", [String])
    ], TimeParserPipe);
    return TimeParserPipe;
}());
export { TimeParserPipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZS1wYXJzZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1tYXRlcmlhbC10aW1lcGlja2VyLyIsInNvdXJjZXMiOlsic3JjL2FwcC9tYXRlcmlhbC10aW1lcGlja2VyL3BpcGVzL3RpbWUtcGFyc2VyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxRQUFRLEVBQW1CLE1BQU0sT0FBTyxDQUFDO0FBT2xEO0lBSUksd0JBQXlDLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ25ELElBQUksQ0FBQyxlQUFlLEdBQUcsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxlQUFrQyxDQUFDO0lBQzNILENBQUM7SUFFRCxrQ0FBUyxHQUFULFVBQVUsSUFBcUIsRUFBRSxRQUF3QjtRQUF4Qix5QkFBQSxFQUFBLFdBQVcsUUFBUSxDQUFDLElBQUk7UUFDckQsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBSyxFQUFFLEVBQUU7WUFDN0IsT0FBTyxFQUFFLENBQUM7U0FDYjtRQUVELElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxJQUFJLFFBQVEsS0FBSyxRQUFRLENBQUMsTUFBTSxFQUFFO1lBQzlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQzlDO1FBRUQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFFN0MsQ0FBQztJQUVPLGtDQUFTLEdBQWpCLFVBQWtCLElBQXFCLEVBQUUsTUFBYyxFQUFFLFdBQXdCO1FBQzdFLElBQU0sVUFBVSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLE1BQU0sRUFBRSxFQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVuSCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ3BCLE9BQU8sVUFBVSxDQUFDO1NBQ3JCO1FBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQyx5QkFBdUIsSUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQWpDUSxjQUFjO1FBSDFCLElBQUksQ0FBQztZQUNGLElBQUksRUFBRSxZQUFZO1NBQ3JCLENBQUM7UUFLZSxtQkFBQSxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUE7O09BSnZCLGNBQWMsQ0FtQzFCO0lBQUQscUJBQUM7Q0FBQSxBQW5DRCxJQW1DQztTQW5DWSxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRJTUVfTE9DQUxFIH0gZnJvbSAnLi4vdG9rZW5zL3RpbWUtbG9jYWxlLnRva2VuJztcclxuaW1wb3J0IHsgVGltZVVuaXQgfSBmcm9tICcuLi9tb2RlbHMvdGltZS11bml0LmVudW0nO1xyXG5pbXBvcnQgeyBEYXRlVGltZSwgTnVtYmVyaW5nU3lzdGVtIH0gZnJvbSAnbHV4b24nO1xyXG5cclxudHlwZSBUaW1lTWVhc3VyZSA9ICdob3VyJyB8ICdtaW51dGUnO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ3RpbWVQYXJzZXInXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUaW1lUGFyc2VyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICAgIHByaXZhdGUgbnVtYmVyaW5nU3lzdGVtOiBOdW1iZXJpbmdTeXN0ZW07XHJcblxyXG4gICAgY29uc3RydWN0b3IoQEluamVjdChUSU1FX0xPQ0FMRSkgcHJpdmF0ZSBsb2NhbGU6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMubnVtYmVyaW5nU3lzdGVtID0gRGF0ZVRpbWUubG9jYWwoKS5zZXRMb2NhbGUodGhpcy5sb2NhbGUpLnJlc29sdmVkTG9jYWxlT3B0cygpLm51bWJlcmluZ1N5c3RlbSBhcyBOdW1iZXJpbmdTeXN0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtKHRpbWU6IHN0cmluZyB8IG51bWJlciwgdGltZVVuaXQgPSBUaW1lVW5pdC5IT1VSKTogbnVtYmVyIHwgc3RyaW5nIHtcclxuICAgICAgICBpZiAodGltZSA9PSBudWxsIHx8IHRpbWUgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghaXNOYU4oK3RpbWUpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aW1lO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRpbWVVbml0ID09PSBUaW1lVW5pdC5NSU5VVEUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaW1lKHRpbWUsICdtJywgJ21pbnV0ZScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VUaW1lKHRpbWUsICdIJywgJ2hvdXInKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwYXJzZVRpbWUodGltZTogc3RyaW5nIHwgbnVtYmVyLCBmb3JtYXQ6IHN0cmluZywgdGltZU1lYXN1cmU6IFRpbWVNZWFzdXJlKTogbnVtYmVyIHtcclxuICAgICAgICBjb25zdCBwYXJzZWRUaW1lID0gRGF0ZVRpbWUuZnJvbUZvcm1hdChTdHJpbmcodGltZSksIGZvcm1hdCwge251bWJlcmluZ1N5c3RlbTogdGhpcy5udW1iZXJpbmdTeXN0ZW19KVt0aW1lTWVhc3VyZV07XHJcblxyXG4gICAgICAgIGlmICghaXNOYU4ocGFyc2VkVGltZSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcnNlZFRpbWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBwYXJzZSB0aW1lIC0gJHt0aW1lfWApO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=