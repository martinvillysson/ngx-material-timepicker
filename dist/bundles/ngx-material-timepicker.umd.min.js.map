{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-unit.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-period.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/models/time-format.enum.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/time-adapter.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/ngx-material-timepicker-content/ngx-material-timepicker-content.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/services/ngx-material-timepicker.service.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-toggle-icon.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-toggle-button/ngx-material-timepicker-toggle.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/tokens/time-locale.token.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-timepicker.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/ngx-material-timepicker-theme.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/utils/timepicker-time.utils.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-hours-face/ngx-material-timepicker-hours-face.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-face/ngx-material-timepicker-face.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-button/ngx-material-timepicker-button.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial/ngx-material-timepicker-dial.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-parser.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-dial-control/ngx-material-timepicker-dial-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-period/ngx-material-timepicker-period.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/style-sanitizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/minutes-formatter.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/ngx-timepicker-field.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/time-localizer.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-hour.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/pipes/active-minute.pipe.ts","ng://ngx-material-timepicker/src/app/material-timepicker/directives/autofocus.directive.ts","ng://ngx-material-timepicker/src/app/material-timepicker/ngx-material-timepicker.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","TimeUnit","TimePeriod","TimeFormat","__assign","assign","t","s","i","n","arguments","length","call","apply","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","isSameOrAfter","time","compareWith","unit","hour","hasSame","valueOf","isSameOrBefore","isDigit","e","some","keyCode","ctrlKey","metaKey","AnimationState","TimeAdapter","parseTime","opts","_a","getLocaleOptionsByTime","numberingSystem","locale","timeMask","split","TWELVE_SHORT","TWENTY_FOUR_SHORT","DateTime","fromFormat","formatTime","format","setLocale","DEFAULT_LOCALE","toLocaleString","TIME_SIMPLE","hour12","DEFAULT_NUMBERING_SYSTEM","toLocaleTimeString","DEFAULT_FORMAT","_b","timeFormat","isTimeAvailable","min","max","granularity","minutesGap","convertedTime","minutes","minute","Error","isAfter","isBefore","between","before","after","isBetween","formatHour","currentHour","period","AM","PM","fromDateTimeToString","TWENTY_FOUR","TWELVE","reconfigure","toFormat","luxon","local","resolvedLocaleOpts","localeConfig","defaultConfig","isNaN","parseInt","DEFAULT_HOUR","angle","DEFAULT_MINUTE","NgxMaterialTimepickerService","hourSubject","BehaviorSubject","minuteSubject","periodSubject","next","asObservable","setDefaultTimeIfAvailable","setDefaultTime","console","error","getFullTime","getValue","trim","defaultTime","toJSDate","fromJSDate","isValid","substr","toUpperCase","getHours","formatHourByPeriod","getMinutes","resetTime","Injectable","providedIn","NgxMaterialTimepickerContentComponent","timepickerService","timeUnit","activeTimeUnit","HOUR","unsubscribe","Subject","ngOnInit","animationState","disableAnimation","ENTER","defineTime","selectedHour","pipe","shareReplay","bufferSize","refCount","selectedMinute","selectedPeriod","timepickerBaseRef","timeUpdated","takeUntil","subscribe","bind","onHourChange","onHourSelected","changeTimeUnit","MINUTE","hourSelected","onMinuteChange","changePeriod","setTime","timeSet","close","LEAVE","animationDone","event","phaseName","toState","ngOnDestroy","complete","minTime","maxTime","tslib_1.__decorate","Input","Component","selector","template","animations","trigger","transition","style","transform","animate","opacity","providers","NgxMaterialTimepickerComponent","overlay","vcr","isEsc","subscriptions","Subscription","EventEmitter","opened","closed","timepickerInput","_format","value","_minutesGap","gap","Math","floor","disabled","registerInput","input","elementRef","open","_this","positionStrategy","position","flexibleConnectedTo","withPositions","originX","originY","overlayX","overlayY","overlayRef","hasBackdrop","disposeOnNavigation","add","keydownEvents","undefined","detach","backdropClick","detachments","ngxMaterialTimepickerContentComponentPortal","ComponentPortal","ngxMaterialTimepickerContentComponent","attach","instance","cancelBtnTmpl","confirmBtnTmpl","editableHintTmpl","enableKeyboardInput","preventOverlayClick","updateTime","ViewChild","static","TemplateRef","ElementRef","Output","encapsulation","ViewEncapsulation","None","Overlay","ViewContainerRef","NgxMaterialTimepickerToggleIconDirective","Directive","NgxMaterialTimepickerToggleComponent","_disabled","timepicker","stopPropagation","ContentChild","TIME_LOCALE","InjectionToken","VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TimepickerDirective","multi","_value","timepickerSubscriptions","onTouched","onChange","previousFormat","_timepicker","_min","_max","picker","registerTimepicker","updateInputValue","warn","onInput","ngOnChanges","changes","currentValue","onClick","disableClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","forEach","push","nativeElement","HostListener","host","[disabled]","(input)","(blur)","tslib_1.__param","Inject","String","NgxMaterialTimepickerThemeDirective","element","ngAfterViewInit","theme","setTheme","val","prop","setProperty","replace","toLowerCase","fill","map","v","disableHours","hours","config","currentTime","fromObject","disableMinutes","hour_1","NgxMaterialTimepickerHoursFace","hourChange","hoursList","onTimeSelected","NgxMaterialTimepicker24HoursFaceComponent","_super","tslib_1.__extends","ngAfterContentInit","changeDetection","ChangeDetectionStrategy","OnPush","NgxMaterialTimepicker12HoursFaceComponent","NgxMaterialTimepickerMinutesFaceComponent","minutesList","minuteChange","CLOCK_HAND_STYLES","height","top","NgxMaterialTimepickerFaceComponent","innerClockFaceSize","timeChange","timeSelected","setClockHandPosition","addTouchEvents","faceTimeChanges","selectedTimeChanges","selectedTime","faceTime","find","setTimeout","selectAvailableTime","trackByTime","_","onMousedown","preventDefault","isStarted","selectTime","MouseEvent","type","x0","y0","x","y","currentAngle","clockFaceCords","clockFace","getBoundingClientRect","centerX","left","width","centerY","arctangent","atan","abs","clientX","clientY","PI","circleAngle","isInnerClockChosen","isInnerClockFace","angleStep","roundedAngle","roundAngle","onMouseup","removeTouchEvents","touchStartHandler","touchEndHandler","addEventListener","removeEventListener","decreaseClockHand","increaseClockHand","clockHand","isClockFaceDisabled","every","availableTime","sqrt","pow","step","round","NgxMaterialTimepickerButtonComponent","NgxMaterialTimepickerDialComponent","meridiems","Info","periodChanged","timeUnitChanged","hourChanged","minuteChanged","changeHour","changeMinute","showHint","isHintVisible","hideHint","TimeParserPipe","timeMeasure","parsedTime","Pipe","name","NgxMaterialTimepickerDialControlComponent","timeParserPipe","timeChanged","focused","unfocused","timeList","saveTimeAndChangeTimeUnit","previousTime","onKeyDown","char","fromCharCode","nextTime","test","isTimeUnavailable","isTimeDisabledToChange","changeTimeByArrow","onModelChange","toString","NgxMaterialTimepickerPeriodComponent","timePeriod","isPeriodAvailable","isSwitchPeriodAvailable","getDisabledTimeByPeriod","sequence","StyleSanitizerPipe","domSanitizer","bypassSecurityTrustStyle","DomSanitizer","TimeFormatterPipe","MinutesFormatterPipe","NgxTimepickerFieldComponent","minHour","maxHour","buttonAlign","unsubscribe$","timepickerTime","_defaultTime","isDefaultTime","period$","h","changeTime","m","onTimeSet","localeTime","NgxTimepickerFieldComponent_1","NgxTimepickerTimeControlComponent","timeParser","isDefaultTimeSet","timeChanges","isFirstChange","onKeydown","increase","decrease","emit","onFocus","isFocused","onBlur","NgxTimepickerPeriodSelectorComponent","periodSelected","periods","localizedPeriod","indexOf","isOpened","select","TimeLocalizerPipe","ActiveHourPipe","ActiveMinutePipe","currentMinute","AutofocusDirective","document","activeElement","isFocusActive","focus","preventScroll","Optional","DOCUMENT","NgxMaterialTimepickerModule","ngModule","NgxMaterialTimepickerModule_1","useValue","NgModule","imports","CommonModule","FormsModule","PortalModule","OverlayModule","exports","declarations","ɵ0","entryComponents"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export enum TimeUnit {\r\n    HOUR,\r\n    MINUTE\r\n}\r\n","export enum TimePeriod {\r\n    AM = 'AM',\r\n    PM = 'PM'\r\n}\r\n","export enum TimeFormat {\r\n    TWELVE = 'hh:mm a',\r\n    TWELVE_SHORT = 'h:m a',\r\n    TWENTY_FOUR = 'HH:mm',\r\n    TWENTY_FOUR_SHORT = 'H:m'\r\n}\r\n","/* tslint:disable */\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nexport function isSameOrAfter(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n    if (unit === 'hours') {\r\n        return time.hour >= compareWith.hour;\r\n    }\r\n    if (unit === 'minutes') {\r\n        return time.hasSame(compareWith, unit) || time.valueOf() > compareWith.valueOf();\r\n    }\r\n}\r\n\r\nexport function isSameOrBefore(time: DateTime, compareWith: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n    if (unit === 'hours') {\r\n        return time.hour <= compareWith.hour;\r\n    }\r\n    if (unit === 'minutes') {\r\n        return time.hasSame(compareWith, unit) || time.valueOf() <= compareWith.valueOf();\r\n    }\r\n}\r\n\r\nexport function isBetween(time: DateTime, before: DateTime, after: DateTime, unit: 'hours' | 'minutes' = 'minutes'): boolean {\r\n    if (unit === 'hours') {\r\n        return isSameOrBefore(time, after, unit) && isSameOrAfter(time, before, unit);\r\n    }\r\n    if (unit === 'minutes') {\r\n        return isSameOrBefore(time, after) && isSameOrAfter(time, before);\r\n    }\r\n}\r\n\r\nexport function isDigit(e: KeyboardEvent) {\r\n    // Allow: backspace, delete, tab, escape, enter\r\n    if ([46, 8, 9, 27, 13].some(n => n === e.keyCode) ||\r\n        // Allow: Ctrl/cmd+A\r\n        (e.keyCode == 65 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+C\r\n        (e.keyCode == 67 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: Ctrl/cmd+X\r\n        (e.keyCode == 88 && (e.ctrlKey === true || e.metaKey === true)) ||\r\n        // Allow: home, end, left, right, up, down\r\n        (e.keyCode >= 35 && e.keyCode <= 40)) {\r\n\r\n        return true;\r\n    }\r\n    return !((e.keyCode < 48 || e.keyCode > 57) && (e.keyCode < 96 || e.keyCode > 105));\r\n}\r\n","import { DateTime, DateTimeFormatOptions, LocaleOptions, NumberingSystem } from 'luxon';\r\n\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { isBetween, isSameOrAfter, isSameOrBefore } from '../utils/timepicker.utils';\r\nimport { TimeOptions } from '../models/time-options.interface';\r\n\r\n// @dynamic\r\nexport class TimeAdapter {\r\n    static DEFAULT_FORMAT = 12;\r\n    static DEFAULT_LOCALE = 'en-US';\r\n    static DEFAULT_NUMBERING_SYSTEM: NumberingSystem = 'latn';\r\n\r\n    static parseTime(time: string, opts: TimeOptions): DateTime {\r\n        const {numberingSystem, locale} = TimeAdapter.getLocaleOptionsByTime(time, opts);\r\n        const isPeriodExist = time.split(' ').length === 2;\r\n        const timeMask = isPeriodExist ? TimeFormat.TWELVE_SHORT : TimeFormat.TWENTY_FOUR_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask, {numberingSystem, locale});\r\n    }\r\n\r\n    static formatTime(time: string, opts: TimeOptions): string {\r\n        const {format} = opts;\r\n\r\n        return TimeAdapter.parseTime(time, opts).setLocale(TimeAdapter.DEFAULT_LOCALE)\r\n            .toLocaleString({\r\n                ...DateTime.TIME_SIMPLE,\r\n                hour12: format !== 24,\r\n                numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM\r\n            });\r\n    }\r\n\r\n    static toLocaleTimeString(time: string, opts: TimeOptions = {}): string {\r\n        const {format = TimeAdapter.DEFAULT_FORMAT, locale = TimeAdapter.DEFAULT_LOCALE} = opts;\r\n        const timeFormat: DateTimeFormatOptions = {...DateTime.TIME_SIMPLE, hour12: format !== 24};\r\n        const timeMask = (format === 24) ? TimeFormat.TWENTY_FOUR_SHORT : TimeFormat.TWELVE_SHORT;\r\n\r\n        return DateTime.fromFormat(time, timeMask).setLocale(locale).toLocaleString(timeFormat);\r\n    }\r\n\r\n    static isTimeAvailable(\r\n        time: string,\r\n        min?: DateTime,\r\n        max?: DateTime,\r\n        granularity?: 'hours' | 'minutes',\r\n        minutesGap?: number,\r\n        format?: number\r\n    ): boolean {\r\n        if (!time) {\r\n            return;\r\n        }\r\n\r\n        const convertedTime = this.parseTime(time, {format});\r\n        const minutes = convertedTime.minute;\r\n\r\n        if (minutesGap && minutes === minutes && minutes % minutesGap !== 0) {\r\n            throw new Error(`Your minutes - ${minutes} doesn\\'t match your minutesGap - ${minutesGap}`);\r\n        }\r\n        const isAfter = (min && !max)\r\n            && isSameOrAfter(convertedTime, min, granularity);\r\n        const isBefore = (max && !min)\r\n            && isSameOrBefore(convertedTime, max, granularity);\r\n        const between = (min && max)\r\n            && isBetween(convertedTime, min, max, granularity);\r\n        const isAvailable = !min && !max;\r\n\r\n        return isAfter || isBefore || between || isAvailable;\r\n    }\r\n\r\n    /***\r\n     *  Format hour according to time format (12 or 24)\r\n     */\r\n    static formatHour(currentHour: number, format: number, period: TimePeriod): number {\r\n        if (format === 24) {\r\n            return currentHour;\r\n        }\r\n        const hour = period === TimePeriod.AM ? currentHour : currentHour + 12;\r\n\r\n        if (period === TimePeriod.AM && hour === 12) {\r\n            return 0;\r\n        } else if (period === TimePeriod.PM && hour === 24) {\r\n            return 12;\r\n        }\r\n        return hour;\r\n    }\r\n\r\n    static fromDateTimeToString(time: DateTime, format: number): string {\r\n        const timeFormat = format === 24 ? TimeFormat.TWENTY_FOUR : TimeFormat.TWELVE;\r\n\r\n        return time.reconfigure({\r\n            numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM,\r\n            locale: TimeAdapter.DEFAULT_LOCALE\r\n        }).toFormat(timeFormat);\r\n    }\r\n\r\n    private static getLocaleOptionsByTime(time: string, opts: LocaleOptions): LocaleOptions {\r\n        const {numberingSystem, locale} = DateTime.local().setLocale(opts.locale).resolvedLocaleOpts();\r\n        const localeConfig: LocaleOptions = {numberingSystem: numberingSystem as NumberingSystem, locale};\r\n        const defaultConfig: LocaleOptions = {numberingSystem: TimeAdapter.DEFAULT_NUMBERING_SYSTEM, locale: TimeAdapter.DEFAULT_LOCALE};\r\n\r\n        return isNaN(parseInt(time, 10)) ? localeConfig : defaultConfig;\r\n    }\r\n}\r\n","import { Component, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\nimport { animate, AnimationEvent, style, transition, trigger } from '@angular/animations';\r\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { shareReplay, takeUntil } from 'rxjs/operators';\r\nimport { TimeAdapter } from '../../services/time-adapter';\r\nimport { TimepickerRef } from '../../models/timepicker-ref.interface';\r\nimport { TimepickerConfig } from '../../models/timepicker-config.interface';\r\n\r\nexport enum AnimationState {\r\n    ENTER = 'enter',\r\n    LEAVE = 'leave'\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-content',\r\n    templateUrl: './ngx-material-timepicker-content.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-content.component.scss'],\r\n    animations: [\r\n        trigger('timepicker', [\r\n            transition(`* => ${AnimationState.ENTER}`, [\r\n                style({transform: 'translateY(-30%)'}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(0)'}))\r\n            ]),\r\n            transition(`${AnimationState.ENTER} => ${AnimationState.LEAVE}`, [\r\n                style({transform: 'translateY(0)', opacity: 1}),\r\n                animate('0.2s ease-out', style({transform: 'translateY(-30%)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ],\r\n    providers: [NgxMaterialTimepickerService]\r\n})\r\nexport class NgxMaterialTimepickerContentComponent implements OnInit, OnDestroy, TimepickerConfig {\r\n\r\n    selectedHour: Observable<ClockFaceTime>;\r\n    selectedMinute: Observable<ClockFaceTime>;\r\n    selectedPeriod: Observable<TimePeriod>;\r\n\r\n    timeUnit = TimeUnit;\r\n    activeTimeUnit = TimeUnit.HOUR;\r\n\r\n    animationState: AnimationState;\r\n\r\n    cancelBtnTmpl: TemplateRef<Node>;\r\n    editableHintTmpl: TemplateRef<Node>;\r\n    confirmBtnTmpl: TemplateRef<Node>;\r\n\r\n    enableKeyboardInput: boolean;\r\n    preventOverlayClick: boolean;\r\n    disableAnimation: boolean;\r\n    disabled: boolean;\r\n\r\n    format: number;\r\n    minutesGap: number;\r\n\r\n    minTime: DateTime;\r\n    maxTime: DateTime;\r\n    time: string;\r\n\r\n    timepickerBaseRef: TimepickerRef;\r\n\r\n    @Input()\r\n    set defaultTime(time: string) {\r\n        this.setDefaultTime(time);\r\n    }\r\n\r\n    private unsubscribe = new Subject();\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n\r\n        this.animationState = !this.disableAnimation && AnimationState.ENTER;\r\n\r\n        this.defineTime();\r\n\r\n        this.selectedHour = this.timepickerService.selectedHour\r\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n\r\n        this.selectedMinute = this.timepickerService.selectedMinute\r\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n\r\n        this.selectedPeriod = this.timepickerService.selectedPeriod\r\n            .pipe(shareReplay({bufferSize: 1, refCount: true}));\r\n\r\n        this.timepickerBaseRef.timeUpdated.pipe(takeUntil(this.unsubscribe))\r\n            .subscribe(this.setDefaultTime.bind(this));\r\n    }\r\n\r\n    onHourChange(hour: ClockFaceTime): void {\r\n        this.timepickerService.hour = hour;\r\n    }\r\n\r\n    onHourSelected(hour: number): void {\r\n        this.changeTimeUnit(TimeUnit.MINUTE);\r\n        this.timepickerBaseRef.hourSelected.next(hour);\r\n    }\r\n\r\n    onMinuteChange(minute: ClockFaceTime): void {\r\n        this.timepickerService.minute = minute;\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.activeTimeUnit = unit;\r\n    }\r\n\r\n    setTime(): void {\r\n        this.timepickerBaseRef.timeSet.next(this.timepickerService.getFullTime(this.format));\r\n        this.close();\r\n    }\r\n\r\n    close(): void {\r\n        if (this.disableAnimation) {\r\n            this.timepickerBaseRef.close();\r\n            return;\r\n        }\r\n\r\n        this.animationState = AnimationState.LEAVE;\r\n    }\r\n\r\n    animationDone(event: AnimationEvent): void {\r\n        if (event.phaseName === 'done' && event.toState === AnimationState.LEAVE) {\r\n            this.timepickerBaseRef.close();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n\r\n    private setDefaultTime(time: string): void {\r\n        this.timepickerService.setDefaultTimeIfAvailable(\r\n            time, this.minTime, this.maxTime, this.format, this.minutesGap);\r\n    }\r\n\r\n    private defineTime(): void {\r\n        const minTime = this.minTime;\r\n\r\n        if (minTime && !this.time) {\r\n            const time = TimeAdapter.fromDateTimeToString(minTime, this.format);\r\n\r\n            this.setDefaultTime(time);\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { TimePeriod } from '../models/time-period.enum';\r\nimport { TimeAdapter } from './time-adapter';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nconst DEFAULT_HOUR: ClockFaceTime = {\r\n    time: 12,\r\n    angle: 360\r\n};\r\nconst DEFAULT_MINUTE: ClockFaceTime = {\r\n    time: 0,\r\n    angle: 360\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class NgxMaterialTimepickerService {\r\n\r\n    private hourSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_HOUR);\r\n    private minuteSubject = new BehaviorSubject<ClockFaceTime>(DEFAULT_MINUTE);\r\n    private periodSubject = new BehaviorSubject<TimePeriod>(TimePeriod.AM);\r\n\r\n\r\n    set hour(hour: ClockFaceTime) {\r\n        this.hourSubject.next(hour);\r\n    }\r\n\r\n    get selectedHour(): Observable<ClockFaceTime> {\r\n        return this.hourSubject.asObservable();\r\n    }\r\n\r\n    set minute(minute: ClockFaceTime) {\r\n        this.minuteSubject.next(minute);\r\n    }\r\n\r\n    get selectedMinute(): Observable<ClockFaceTime> {\r\n        return this.minuteSubject.asObservable();\r\n    }\r\n\r\n    set period(period: TimePeriod) {\r\n        const isPeriodValid = (period === TimePeriod.AM) || (period === TimePeriod.PM);\r\n\r\n        if (isPeriodValid) {\r\n            this.periodSubject.next(period);\r\n        }\r\n    }\r\n\r\n    get selectedPeriod(): Observable<TimePeriod> {\r\n        return this.periodSubject.asObservable();\r\n    }\r\n\r\n\r\n    setDefaultTimeIfAvailable(time: string, min: DateTime, max: DateTime, format: number, minutesGap?: number) {\r\n        /* Workaround to double error message*/\r\n        try {\r\n            if (TimeAdapter.isTimeAvailable(time, min, max, 'minutes', minutesGap)) {\r\n                this.setDefaultTime(time, format);\r\n            }\r\n        } catch (e) {\r\n            console.error(e);\r\n        }\r\n    }\r\n\r\n    getFullTime(format: number): string {\r\n        const hour = this.hourSubject.getValue().time;\r\n        const minute = this.minuteSubject.getValue().time;\r\n        const period = format === 12 ? this.periodSubject.getValue() : '';\r\n        const time = `${hour}:${minute} ${period}`.trim();\r\n\r\n        return TimeAdapter.formatTime(time, {format});\r\n    }\r\n\r\n    private setDefaultTime(time: string, format: number) {\r\n        const defaultTime = TimeAdapter.parseTime(time, {format}).toJSDate();\r\n\r\n        if (DateTime.fromJSDate(defaultTime).isValid) {\r\n            const period = time.substr(time.length - 2).toUpperCase();\r\n            const hour = defaultTime.getHours();\r\n\r\n            this.hour = {...DEFAULT_HOUR, time: formatHourByPeriod(hour, period as TimePeriod)};\r\n            this.minute = {...DEFAULT_MINUTE, time: defaultTime.getMinutes()};\r\n            this.period = period as TimePeriod;\r\n\r\n        } else {\r\n            this.resetTime();\r\n        }\r\n    }\r\n\r\n    private resetTime(): void {\r\n        this.hour = {...DEFAULT_HOUR};\r\n        this.minute = {...DEFAULT_MINUTE};\r\n        this.period = TimePeriod.AM;\r\n    }\r\n}\r\n\r\n/***\r\n *  Format hour in 24hours format to meridian (AM or PM) format\r\n */\r\nfunction formatHourByPeriod(hour: number, period: TimePeriod): number {\r\n    switch (period) {\r\n        case TimePeriod.AM:\r\n            return hour === 0 ? 12 : hour;\r\n        case TimePeriod.PM:\r\n            return hour === 12 ? 12 : hour - 12;\r\n        default:\r\n            return hour;\r\n    }\r\n}\r\n","import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  TemplateRef,\r\n  ElementRef,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  OnDestroy,\r\n  ViewEncapsulation } from '@angular/core';\r\nimport { Subject, Subscription } from 'rxjs';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { DateTime } from 'luxon';\r\nimport {\r\n    NgxMaterialTimepickerContentComponent\r\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\r\nimport { TimepickerRef } from './models/timepicker-ref.interface';\r\nimport {ComponentPortal} from '@angular/cdk/portal';\r\nimport { Overlay, OverlayRef } from '@angular/cdk/overlay';\r\n\r\nconst ESCAPE = 27;\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker',\r\n    templateUrl: 'ngx-material-timepicker.component.html',\r\n    styleUrls: ['./ngx-material-timepicker.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class NgxMaterialTimepickerComponent implements TimepickerRef, OnDestroy {\r\n    timeUpdated = new Subject<string>();\r\n    @ViewChild('pickerTmpl', { static: true }) pickerTmpl: TemplateRef<any>;\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n    @Input('ESC') isEsc = true;\r\n    @Input() enableKeyboardInput: boolean;\r\n    @Input() preventOverlayClick: boolean;\r\n    @Input() disableAnimation: boolean;\r\n    @Input() defaultTime: string;\r\n    @Input() trigger: ElementRef;\r\n    overlayRef: OverlayRef;\r\n    overlayDetachmentsSubscription: any;\r\n    overlayBackdropClickSubscription: any;\r\n    overlayKeyDownSubscription: any;\r\n    subscriptions = new Subscription();\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n    }\r\n\r\n    get format(): number {\r\n        return this.timepickerInput ? this.timepickerInput.format : this._format;\r\n    }\r\n\r\n    @Input()\r\n    set minutesGap(gap: number) {\r\n        if (gap == null) {\r\n            return;\r\n        }\r\n        gap = Math.floor(gap);\r\n        this._minutesGap = gap <= 59 ? gap : 1;\r\n    }\r\n\r\n    get minutesGap(): number {\r\n        return this._minutesGap;\r\n    }\r\n\r\n    @Output() timeSet = new EventEmitter<string>();\r\n    @Output() opened = new EventEmitter<null>();\r\n    @Output() closed = new EventEmitter<null>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    private _minutesGap: number;\r\n    private _format: number;\r\n    private timepickerInput: TimepickerDirective;\r\n\r\n    constructor(private overlay: Overlay, private vcr: ViewContainerRef) {\r\n    }\r\n\r\n    get minTime(): DateTime {\r\n        return this.timepickerInput && (this.timepickerInput.min as DateTime);\r\n    }\r\n\r\n    get maxTime(): DateTime {\r\n        return this.timepickerInput && (this.timepickerInput.max as DateTime);\r\n    }\r\n\r\n    get disabled(): boolean {\r\n        return this.timepickerInput && this.timepickerInput.disabled;\r\n    }\r\n\r\n    get time(): string {\r\n        return this.timepickerInput && this.timepickerInput.value;\r\n    }\r\n\r\n    /***\r\n     * Register an input with this timepicker.\r\n     * input - The timepicker input to register with this timepicker\r\n     */\r\n    registerInput(input: TimepickerDirective): void {\r\n        if (this.timepickerInput) {\r\n            throw Error('A Timepicker can only be associated with a single input.');\r\n        }\r\n\r\n        this.timepickerInput = input;\r\n        this.trigger = input.elementRef;\r\n    }\r\n\r\n    open(): void {\r\n\r\n      const positionStrategy = this.overlay\r\n        .position()\r\n        .flexibleConnectedTo(this.trigger)\r\n        .withPositions([{originX: 'end', originY: 'center', overlayX: 'start', overlayY: 'center'}]);\r\n\r\n      this.overlayRef = this.overlay.create({\r\n        hasBackdrop: true,\r\n        positionStrategy: positionStrategy,\r\n        disposeOnNavigation: true,\r\n      });\r\n\r\n      this.subscriptions.add(this.overlayRef\r\n      .keydownEvents()\r\n      .subscribe((event: KeyboardEvent) => {\r\n        if (event.key !== undefined) {\r\n          if (event.key === 'Escape') {\r\n            this.overlayRef.detach();\r\n          }\r\n        } else {\r\n          // tslint:disable-next-line:deprecation\r\n          if (event.keyCode === ESCAPE) {\r\n            this.overlayRef.detach();\r\n          }\r\n        }\r\n      }));\r\n\r\n      this.subscriptions.add(this.overlayRef.backdropClick().subscribe((event: MouseEvent) => {\r\n        this.overlayRef.detach();\r\n      }));\r\n\r\n      this.subscriptions.add(this.overlayRef.detachments().subscribe(() => {\r\n        this.closed.next();\r\n      }));\r\n\r\n      const ngxMaterialTimepickerContentComponentPortal = new ComponentPortal(NgxMaterialTimepickerContentComponent, this.vcr);\r\n\r\n        const ngxMaterialTimepickerContentComponent = this.overlayRef.attach(ngxMaterialTimepickerContentComponentPortal);\r\n\r\n        ngxMaterialTimepickerContentComponent.instance.timepickerBaseRef = this;\r\n        ngxMaterialTimepickerContentComponent.instance.time = this.time;\r\n        ngxMaterialTimepickerContentComponent.instance.defaultTime = this.defaultTime;\r\n        ngxMaterialTimepickerContentComponent.instance.maxTime = this.maxTime;\r\n        ngxMaterialTimepickerContentComponent.instance.minTime = this.minTime;\r\n        ngxMaterialTimepickerContentComponent.instance.format = this.format;\r\n        ngxMaterialTimepickerContentComponent.instance.minutesGap = this.minutesGap;\r\n        ngxMaterialTimepickerContentComponent.instance.disableAnimation = this.disableAnimation;\r\n        ngxMaterialTimepickerContentComponent.instance.cancelBtnTmpl = this.cancelBtnTmpl;\r\n        ngxMaterialTimepickerContentComponent.instance.confirmBtnTmpl = this.confirmBtnTmpl;\r\n        ngxMaterialTimepickerContentComponent.instance.editableHintTmpl = this.editableHintTmpl;\r\n        ngxMaterialTimepickerContentComponent.instance.disabled = this.disabled;\r\n        ngxMaterialTimepickerContentComponent.instance.enableKeyboardInput = this.enableKeyboardInput;\r\n        ngxMaterialTimepickerContentComponent.instance.preventOverlayClick = this.preventOverlayClick;\r\n        this.opened.next();\r\n    }\r\n\r\n    close(): void {\r\n        this.overlayRef.detach();\r\n    }\r\n\r\n    updateTime(time: string): void {\r\n        this.timeUpdated.next(time);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n      this.subscriptions.unsubscribe();\r\n    }\r\n}\r\n","import {Directive} from '@angular/core';\r\n\r\n/* To override a default toggle icon */\r\n@Directive({selector: '[ngxMaterialTimepickerToggleIcon]'})\r\n\r\nexport class NgxMaterialTimepickerToggleIconDirective {\r\n}\r\n","import {Component, ContentChild, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerToggleIconDirective} from '../../directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport {NgxMaterialTimepickerComponent} from '../../ngx-material-timepicker.component';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-toggle',\r\n    templateUrl: 'ngx-material-timepicker-toggle.component.html',\r\n    styleUrls: ['ngx-material-timepicker-toggle.component.scss']\r\n})\r\n\r\nexport class NgxMaterialTimepickerToggleComponent {\r\n\r\n    @Input('for') timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    get disabled(): boolean {\r\n        return this._disabled === undefined ? this.timepicker.disabled : this._disabled;\r\n    }\r\n\r\n    set disabled(value: boolean) {\r\n        this._disabled = value;\r\n    }\r\n\r\n    private _disabled: boolean;\r\n\r\n    @ContentChild(NgxMaterialTimepickerToggleIconDirective, {static: true}) customIcon: NgxMaterialTimepickerToggleIconDirective;\r\n\r\n    open(event): void {\r\n        if (this.timepicker) {\r\n            this.timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n}\r\n","import { InjectionToken } from '@angular/core';\r\n\r\nexport const TIME_LOCALE = new InjectionToken<string>('TimeLocale');\r\n","import { Directive, ElementRef, forwardRef, HostListener, Inject, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\r\nimport { NgxMaterialTimepickerComponent } from '../ngx-material-timepicker.component';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { DateTime } from 'luxon';\r\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\r\n\r\nconst VALUE_ACCESSOR = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    // tslint:disable-next-line\r\n    useExisting: forwardRef(() => TimepickerDirective),\r\n    multi: true\r\n};\r\n\r\n@Directive({\r\n    selector: '[ngxTimepicker]',\r\n    providers: [VALUE_ACCESSOR],\r\n    host: {\r\n        '[disabled]': 'disabled',\r\n        '(input)': 'onInput($event.target.value)',\r\n        '(blur)': 'onTouched()',\r\n    },\r\n})\r\nexport class TimepickerDirective implements ControlValueAccessor, OnDestroy, OnChanges {\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this.value = this._value;\r\n            this._timepicker.updateTime(this._value);\r\n        }\r\n        this.previousFormat = this._format;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n    private _format = 12;\r\n\r\n    @Input()\r\n    set min(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._min = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\r\n            return;\r\n        }\r\n        this._min = value;\r\n    }\r\n\r\n    get min(): string | DateTime {\r\n        return this._min;\r\n    }\r\n\r\n    private _min: string | DateTime;\r\n\r\n    @Input()\r\n    set max(value: string | DateTime) {\r\n        if (typeof value === 'string') {\r\n            this._max = TimeAdapter.parseTime(value, {locale: this.locale, format: this.format});\r\n            return;\r\n        }\r\n        this._max = value;\r\n    }\r\n\r\n    get max(): string | DateTime {\r\n        return this._max;\r\n    }\r\n\r\n    private _max: string | DateTime;\r\n\r\n    @Input('ngxTimepicker')\r\n    set timepicker(picker: NgxMaterialTimepickerComponent) {\r\n        this.registerTimepicker(picker);\r\n    }\r\n\r\n    private _timepicker: NgxMaterialTimepickerComponent;\r\n\r\n    @Input()\r\n    set value(value: string) {\r\n        if (!value) {\r\n            this._value = '';\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        const time = TimeAdapter.formatTime(value, {locale: this.locale, format: this.format});\r\n        const isAvailable = TimeAdapter.isTimeAvailable(\r\n            time,\r\n            <DateTime>this._min,\r\n            <DateTime>this._max,\r\n            'minutes',\r\n            this._timepicker.minutesGap,\r\n            this._format\r\n        );\r\n\r\n        if (isAvailable) {\r\n            this._value = time;\r\n            this.updateInputValue();\r\n            return;\r\n        }\r\n        console.warn('Selected time doesn\\'t match min or max value');\r\n    }\r\n\r\n    get value(): string {\r\n        if (!this._value) {\r\n            return '';\r\n        }\r\n        return TimeAdapter.toLocaleTimeString(this._value, {format: this.format, locale: this.locale});\r\n    }\r\n\r\n    private _value = '';\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() disableClick: boolean;\r\n\r\n    private timepickerSubscriptions: Subscription[] = [];\r\n    private previousFormat: number;\r\n\r\n    onTouched = () => {\r\n    }\r\n\r\n    private onChange: (value: any) => void = () => {\r\n    }\r\n\r\n    constructor(public elementRef: ElementRef,\r\n                @Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    private set defaultTime(time: string) {\r\n        this._timepicker.defaultTime = TimeAdapter.formatTime(time, {locale: this.locale, format: this.format});\r\n    }\r\n\r\n    onInput(value: string) {\r\n        this.value = value;\r\n        this.onChange(value);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['value'] && changes['value'].currentValue) {\r\n            this.defaultTime = changes['value'].currentValue;\r\n        }\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event) {\r\n        if (!this.disableClick) {\r\n            this._timepicker.open();\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n\r\n    writeValue(value: string): void {\r\n        this.value = value;\r\n        this.defaultTime = value;\r\n    }\r\n\r\n    registerOnChange(fn: (value: any) => void): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: () => void): void {\r\n        this.onTouched = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.timepickerSubscriptions.forEach(s => s.unsubscribe());\r\n    }\r\n\r\n    private registerTimepicker(picker: NgxMaterialTimepickerComponent): void {\r\n        if (picker) {\r\n            this._timepicker = picker;\r\n            this._timepicker.registerInput(this);\r\n            this.timepickerSubscriptions.push(this._timepicker.timeSet.subscribe((time: string) => {\r\n                this.value = time;\r\n                this.onChange(this.value);\r\n                this.onTouched();\r\n            }));\r\n            this.timepickerSubscriptions.push(\r\n                this._timepicker.closed.subscribe(() => this.defaultTime = this._value));\r\n        } else {\r\n            throw new Error('NgxMaterialTimepickerComponent is not defined.' +\r\n                ' Please make sure you passed the timepicker to ngxTimepicker directive');\r\n        }\r\n    }\r\n\r\n    private updateInputValue(): void {\r\n        this.elementRef.nativeElement.value = this.value;\r\n    }\r\n\r\n}\r\n\r\n","import {AfterViewInit, Directive, ElementRef, Input} from '@angular/core';\r\nimport {NgxMaterialTimepickerTheme} from '../models/ngx-material-timepicker-theme.interface';\r\n\r\n@Directive({selector: '[ngxMaterialTimepickerTheme]'})\r\nexport class NgxMaterialTimepickerThemeDirective implements AfterViewInit {\r\n\r\n    @Input('ngxMaterialTimepickerTheme') theme: NgxMaterialTimepickerTheme;\r\n\r\n    private element: HTMLElement;\r\n\r\n    constructor(elementRef: ElementRef) {\r\n        this.element = elementRef.nativeElement;\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.theme) {\r\n            this.setTheme(this.theme);\r\n        }\r\n    }\r\n\r\n    private setTheme(theme): void {\r\n        for (const val in theme) {\r\n            if (theme.hasOwnProperty(val)) {\r\n                if (typeof theme[val] === 'string') {\r\n                    for (const prop in theme) {\r\n                        if (theme.hasOwnProperty(prop)) {\r\n                            this.element.style.setProperty(`--${camelCaseToDash(prop)}`, theme[prop]);\r\n                        }\r\n                    }\r\n                    return;\r\n                }\r\n                this.setTheme(theme[val]);\r\n            }\r\n\r\n        }\r\n    }\r\n}\r\n\r\nfunction camelCaseToDash(myStr) {\r\n    return myStr.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n","import { ClockFaceTime } from '../models/clock-face-time.interface';\r\nimport { TimeAdapter } from '../services/time-adapter';\r\nimport { TimeFormat } from '../models/time-format.enum';\r\nimport { DisabledTimeConfig } from '../models/disabled-time-config.interface';\r\nimport { DateTime } from 'luxon';\r\n\r\n\r\nexport function getHours(format: number): ClockFaceTime[] {\r\n    return Array(format).fill(1).map((v, i) => {\r\n        const angleStep = 30;\r\n        const time = v + i;\r\n        const angle = angleStep * time;\r\n        return {time: time === 24 ? 0 : time, angle};\r\n    });\r\n}\r\n\r\nexport function disableHours(hours: ClockFaceTime[], config: DisabledTimeConfig): ClockFaceTime[] {\r\n    if (config.min || config.max) {\r\n\r\n        return hours.map(value => {\r\n            const hour = config.format === 24 ? value.time : TimeAdapter.formatHour(value.time, config.format, config.period);\r\n            const currentTime = DateTime.fromObject({hour}).toFormat(TimeFormat.TWELVE);\r\n\r\n            return {\r\n                ...value,\r\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'hours')\r\n            };\r\n        });\r\n    }\r\n    return hours;\r\n}\r\n\r\nexport function getMinutes(gap = 1): ClockFaceTime[] {\r\n    const minutesCount = 60;\r\n    const angleStep = 360 / minutesCount;\r\n    const minutes = [];\r\n\r\n    for (let i = 0; i < minutesCount; i++) {\r\n        const angle = angleStep * i;\r\n        if (i % gap === 0) {\r\n            minutes.push({time: i, angle: angle !== 0 ? angle : 360});\r\n        }\r\n    }\r\n    return minutes;\r\n}\r\n\r\nexport function disableMinutes(minutes: ClockFaceTime[], selectedHour: number, config: DisabledTimeConfig) {\r\n    if (config.min || config.max) {\r\n\r\n        const hour = TimeAdapter.formatHour(selectedHour, config.format, config.period);\r\n\r\n        return minutes.map(value => {\r\n            const currentTime = DateTime.fromObject({hour, minute: value.time}).toFormat(TimeFormat.TWELVE);\r\n\r\n            return {\r\n                ...value,\r\n                disabled: !TimeAdapter.isTimeAvailable(currentTime, config.min, config.max, 'minutes')\r\n            };\r\n        });\r\n    }\r\n    return minutes;\r\n}\r\n","import { EventEmitter, Input, Output } from '@angular/core';\r\nimport { DateTime } from 'luxon';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { getHours } from '../../utils/timepicker-time.utils';\r\n\r\n\r\nexport class NgxMaterialTimepickerHoursFace {\r\n\r\n    @Input() selectedHour: ClockFaceTime;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n\r\n    @Output() hourChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() hourSelected = new EventEmitter<number>();\r\n\r\n    hoursList: ClockFaceTime[] = [];\r\n\r\n    protected constructor(format: number) {\r\n        this.hoursList = getHours(format);\r\n    }\r\n\r\n    onTimeSelected(time: number): void {\r\n        this.hourSelected.next(time);\r\n    }\r\n}\r\n","import { AfterContentInit, ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport { disableHours } from '../../utils/timepicker-time.utils';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-24-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-24-hours-face.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMaterialTimepicker24HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements AfterContentInit {\r\n\r\n    constructor() {\r\n        super(24);\r\n    }\r\n\r\n    ngAfterContentInit() {\r\n        this.hoursList = disableHours(this.hoursList, {\r\n            min: this.minTime,\r\n            max: this.maxTime,\r\n            format: this.format\r\n        });\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgxMaterialTimepickerHoursFace } from '../timepicker-hours-face/ngx-material-timepicker-hours-face';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { disableHours } from '../../utils/timepicker-time.utils';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-12-hours-face',\r\n    templateUrl: 'ngx-material-timepicker-12-hours-face.component.html',\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgxMaterialTimepicker12HoursFaceComponent extends NgxMaterialTimepickerHoursFace implements OnChanges {\r\n\r\n    @Input() period: TimePeriod;\r\n\r\n    constructor() {\r\n        super(12);\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            this.hoursList = disableHours(this.hoursList, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { DateTime } from 'luxon';\r\nimport { disableMinutes, getMinutes } from '../../utils/timepicker-time.utils';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-minutes-face',\r\n    templateUrl: './ngx-material-timepicker-minutes-face.component.html'\r\n})\r\nexport class NgxMaterialTimepickerMinutesFaceComponent implements OnChanges {\r\n\r\n    minutesList: ClockFaceTime[] = [];\r\n    timeUnit = TimeUnit;\r\n\r\n    @Input() selectedMinute: ClockFaceTime;\r\n    @Input() selectedHour: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() minuteChange = new EventEmitter<ClockFaceTime>();\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n            this.minutesList = disableMinutes(minutes, this.selectedHour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n","import {\r\n    AfterViewInit,\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnDestroy,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild\r\n} from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\n\r\nconst CLOCK_HAND_STYLES = {\r\n    small: {\r\n        height: '75px',\r\n        top: 'calc(50% - 75px)'\r\n    },\r\n    large: {\r\n        height: '103px',\r\n        top: 'calc(50% - 103px)'\r\n    }\r\n};\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-face',\r\n    templateUrl: './ngx-material-timepicker-face.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-face.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerFaceComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    isClockFaceDisabled: boolean;\r\n    innerClockFaceSize = 85;\r\n\r\n    @Input() faceTime: ClockFaceTime[];\r\n    @Input() selectedTime: ClockFaceTime;\r\n    @Input() unit: TimeUnit;\r\n    @Input() format: number;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeChange = new EventEmitter<ClockFaceTime>();\r\n    @Output() timeSelected = new EventEmitter<number>();\r\n\r\n    @ViewChild('clockFace', {static: true}) clockFace: ElementRef;\r\n    @ViewChild('clockHand', {static: true}) clockHand: ElementRef;\r\n\r\n    private isStarted: boolean;\r\n    private touchStartHandler: () => any;\r\n    private touchEndHandler: () => any;\r\n\r\n    ngAfterViewInit() {\r\n        this.setClockHandPosition();\r\n        this.addTouchEvents();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        const faceTimeChanges = changes['faceTime'];\r\n        const selectedTimeChanges = changes['selectedTime'];\r\n\r\n        if ((faceTimeChanges && faceTimeChanges.currentValue)\r\n            && (selectedTimeChanges && selectedTimeChanges.currentValue)) {\r\n            /* Set time according to passed an input value */\r\n            this.selectedTime = this.faceTime.find(time => time.time === this.selectedTime.time);\r\n        }\r\n        if (selectedTimeChanges && selectedTimeChanges.currentValue) {\r\n            this.setClockHandPosition();\r\n        }\r\n        if (faceTimeChanges && faceTimeChanges.currentValue) {\r\n            // To avoid an error ExpressionChangedAfterItHasBeenCheckedError\r\n            setTimeout(() => this.selectAvailableTime());\r\n        }\r\n    }\r\n\r\n\r\n    trackByTime(_, time: ClockFaceTime): string | number {\r\n        return time.time;\r\n    }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onMousedown(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = true;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    @HostListener('touchmove', ['$event.changedTouches[0]'])\r\n    @HostListener('touchend', ['$event.changedTouches[0]'])\r\n    @HostListener('mousemove', ['$event'])\r\n    selectTime(e: MouseEvent | Touch): void {\r\n\r\n        if (!this.isStarted && (e instanceof MouseEvent && e.type !== 'click')) {\r\n            return;\r\n        }\r\n        const clockFaceCords = this.clockFace.nativeElement.getBoundingClientRect();\r\n\r\n        /* Get x0 and y0 of the circle */\r\n        const centerX = clockFaceCords.left + clockFaceCords.width / 2;\r\n        const centerY = clockFaceCords.top + clockFaceCords.height / 2;\r\n        /* Counting the arctangent and convert it to from radian to deg */\r\n        const arctangent = Math.atan(Math.abs(e.clientX - centerX) / Math.abs(e.clientY - centerY)) * 180 / Math.PI;\r\n        /* Get angle according to quadrant */\r\n        const circleAngle = countAngleByCords(centerX, centerY, e.clientX, e.clientY, arctangent);\r\n        /* Check if selected time from the inner clock face (24 hours format only) */\r\n        const isInnerClockChosen = this.format && this.isInnerClockFace(centerX, centerY, e.clientX, e.clientY);\r\n        /* Round angle according to angle step */\r\n        const angleStep = this.unit === TimeUnit.MINUTE ? (6 * (this.minutesGap || 1)) : 30;\r\n        const roundedAngle = isInnerClockChosen\r\n            ? roundAngle(circleAngle, angleStep) + 360\r\n            : roundAngle(circleAngle, angleStep);\r\n        const angle = roundedAngle === 0 ? 360 : roundedAngle;\r\n\r\n        const selectedTime = this.faceTime.find(val => val.angle === angle);\r\n\r\n        if (selectedTime && !selectedTime.disabled) {\r\n            this.timeChange.next(selectedTime);\r\n\r\n            /* To let know whether user ended interaction with clock face */\r\n            if (!this.isStarted) {\r\n                this.timeSelected.next(selectedTime.time);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    @HostListener('mouseup', ['$event'])\r\n    onMouseup(e: MouseEvent | TouchEvent) {\r\n        e.preventDefault();\r\n        this.isStarted = false;\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.removeTouchEvents();\r\n    }\r\n\r\n    private addTouchEvents(): void {\r\n        this.touchStartHandler = this.onMousedown.bind(this);\r\n        this.touchEndHandler = this.onMouseup.bind(this);\r\n\r\n        this.clockFace.nativeElement.addEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.addEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private removeTouchEvents(): void {\r\n        this.clockFace.nativeElement.removeEventListener('touchstart', this.touchStartHandler);\r\n        this.clockFace.nativeElement.removeEventListener('touchend', this.touchEndHandler);\r\n    }\r\n\r\n    private setClockHandPosition(): void {\r\n        if (this.format === 24) {\r\n            if (this.selectedTime.time > 12 || this.selectedTime.time === 0) {\r\n                this.decreaseClockHand();\r\n            } else {\r\n                this.increaseClockHand();\r\n            }\r\n        }\r\n\r\n        this.clockHand.nativeElement.style.transform = `rotate(${this.selectedTime.angle}deg)`;\r\n    }\r\n\r\n    private selectAvailableTime(): void {\r\n        const currentTime = this.faceTime.find(time => this.selectedTime.time === time.time);\r\n        this.isClockFaceDisabled = this.faceTime.every(time => time.disabled);\r\n\r\n        if ((currentTime && currentTime.disabled) && !this.isClockFaceDisabled) {\r\n            const availableTime = this.faceTime.find(time => !time.disabled);\r\n\r\n            this.timeChange.next(availableTime);\r\n        }\r\n    }\r\n\r\n    private isInnerClockFace(x0: number, y0: number, x: number, y: number): boolean {\r\n        /* Detect whether time from the inner clock face or not (24 format only) */\r\n        return Math.sqrt(Math.pow(x - x0, 2) + Math.pow(y - y0, 2)) < this.innerClockFaceSize;\r\n    }\r\n\r\n    private decreaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.small.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.small.top;\r\n    }\r\n\r\n    private increaseClockHand(): void {\r\n        this.clockHand.nativeElement.style.height = CLOCK_HAND_STYLES.large.height;\r\n        this.clockHand.nativeElement.style.top = CLOCK_HAND_STYLES.large.top;\r\n    }\r\n}\r\n\r\nfunction roundAngle(angle: number, step: number): number {\r\n    return Math.round(angle / step) * step;\r\n}\r\n\r\nfunction countAngleByCords(x0: number, y0: number, x: number, y: number, currentAngle: number): number {\r\n    if (y > y0 && x >= x0) {// II quarter\r\n        return 180 - currentAngle;\r\n    } else if (y > y0 && x < x0) {// III quarter\r\n        return 180 + currentAngle;\r\n    } else if (y < y0 && x < x0) {// IV quarter\r\n        return 360 - currentAngle;\r\n    } else {// I quarter\r\n        return currentAngle;\r\n    }\r\n}\r\n","import {Component} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-button',\r\n    templateUrl: './ngx-material-timepicker-button.component.html',\r\n    styleUrls: ['./ngx-material-timepicker-button.component.scss']\r\n})\r\nexport class NgxMaterialTimepickerButtonComponent {\r\n}\r\n","import {\r\n    ChangeDetectionStrategy,\r\n    Component,\r\n    EventEmitter,\r\n    Inject,\r\n    Input,\r\n    OnChanges,\r\n    Output,\r\n    SimpleChanges,\r\n    TemplateRef\r\n} from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { DateTime, Info } from 'luxon';\r\nimport { disableHours, disableMinutes, getHours, getMinutes } from '../../utils/timepicker-time.utils';\r\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial',\r\n    templateUrl: 'ngx-material-timepicker-dial.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgxMaterialTimepickerDialComponent implements OnChanges {\r\n\r\n    timeUnit = TimeUnit;\r\n\r\n    hours: ClockFaceTime[];\r\n    minutes: ClockFaceTime[];\r\n    meridiems = Info.meridiems({locale: this.locale});\r\n\r\n    isHintVisible: boolean;\r\n\r\n    @Input() editableHintTmpl: TemplateRef<Node>;\r\n    @Input() hour: number | string;\r\n    @Input() minute: number | string;\r\n    @Input() format: number;\r\n    @Input() period: TimePeriod;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() hourChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() minuteChanged = new EventEmitter<ClockFaceTime>();\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['format'] && changes['format'].currentValue) {\r\n            const hours = getHours(this.format);\r\n\r\n            this.hours = disableHours(hours, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n        if (changes['period'] && changes['period'].currentValue\r\n            || changes['hour'] && changes['hour'].currentValue) {\r\n            const minutes = getMinutes(this.minutesGap);\r\n\r\n            this.minutes = disableMinutes(minutes, +this.hour, {\r\n                min: this.minTime,\r\n                max: this.maxTime,\r\n                format: this.format,\r\n                period: this.period\r\n            });\r\n        }\r\n    }\r\n\r\n    changeTimeUnit(unit: TimeUnit): void {\r\n        this.timeUnitChanged.next(unit);\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.periodChanged.next(period);\r\n    }\r\n\r\n    changeHour(hour: ClockFaceTime): void {\r\n        this.hourChanged.next(hour);\r\n    }\r\n\r\n    changeMinute(minute: ClockFaceTime): void {\r\n        this.minuteChanged.next(minute);\r\n    }\r\n\r\n    showHint(): void {\r\n        this.isHintVisible = true;\r\n    }\r\n\r\n    hideHint(): void {\r\n        this.isHintVisible = false;\r\n    }\r\n}\r\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\r\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime, NumberingSystem } from 'luxon';\r\n\r\ntype TimeMeasure = 'hour' | 'minute';\r\n\r\n@Pipe({\r\n    name: 'timeParser'\r\n})\r\nexport class TimeParserPipe implements PipeTransform {\r\n\r\n    private numberingSystem: NumberingSystem;\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n        this.numberingSystem = DateTime.local().setLocale(this.locale).resolvedLocaleOpts().numberingSystem as NumberingSystem;\r\n    }\r\n\r\n    transform(time: string | number, timeUnit = TimeUnit.HOUR): number | string {\r\n        if (time == null || time === '') {\r\n            return '';\r\n        }\r\n\r\n        if (!isNaN(+time)) {\r\n            return time;\r\n        }\r\n\r\n        if (timeUnit === TimeUnit.MINUTE) {\r\n            return this.parseTime(time, 'm', 'minute');\r\n        }\r\n\r\n        return this.parseTime(time, 'H', 'hour');\r\n\r\n    }\r\n\r\n    private parseTime(time: string | number, format: string, timeMeasure: TimeMeasure): number {\r\n        const parsedTime = DateTime.fromFormat(String(time), format, {numberingSystem: this.numberingSystem})[timeMeasure];\r\n\r\n        if (!isNaN(parsedTime)) {\r\n            return parsedTime;\r\n        }\r\n\r\n        throw new Error(`Cannot parse time - ${time}`);\r\n    }\r\n\r\n}\r\n","/* tslint:disable:triple-equals */\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { isDigit } from '../../utils/timepicker.utils';\r\nimport { TimeParserPipe } from '../../pipes/time-parser.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-dial-control',\r\n    templateUrl: 'ngx-material-timepicker-dial-control.component.html',\r\n    styleUrls: ['ngx-material-timepicker-dial-control.component.scss'],\r\n    providers: [TimeParserPipe]\r\n})\r\nexport class NgxMaterialTimepickerDialControlComponent {\r\n\r\n    previousTime: number | string;\r\n\r\n    @Input() timeList: ClockFaceTime[];\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() time: string;\r\n    @Input() isActive: boolean;\r\n    @Input() isEditable: boolean;\r\n    @Input() minutesGap: number;\r\n\r\n    @Output() timeUnitChanged = new EventEmitter<TimeUnit>();\r\n    @Output() timeChanged = new EventEmitter<ClockFaceTime>();\r\n    @Output() focused = new EventEmitter<null>();\r\n    @Output() unfocused = new EventEmitter<null>();\r\n\r\n    constructor(private timeParserPipe: TimeParserPipe) {\r\n    }\r\n\r\n    private get selectedTime(): ClockFaceTime {\r\n        if (!!this.time) {\r\n            return this.timeList.find(t => t.time === +this.time);\r\n        }\r\n    }\r\n\r\n    saveTimeAndChangeTimeUnit(event: FocusEvent, unit: TimeUnit): void {\r\n        event.preventDefault();\r\n        this.previousTime = this.time;\r\n        this.timeUnitChanged.next(unit);\r\n        this.focused.next();\r\n    }\r\n\r\n    updateTime(): void {\r\n        const time = this.selectedTime;\r\n        if (time) {\r\n            this.timeChanged.next(time);\r\n            this.previousTime = time.time;\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent): void {\r\n        const char = String.fromCharCode(e.keyCode);\r\n\r\n\r\n        if ((!isDigit(e)) || isTimeDisabledToChange(this.time, char, this.timeList)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (isDigit(e)) {\r\n            this.changeTimeByArrow(e.keyCode);\r\n        }\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = this.timeParserPipe.transform(value, this.timeUnit).toString();\r\n    }\r\n\r\n    private changeTimeByArrow(keyCode: number): void {\r\n        const ARROW_UP = 38;\r\n        const ARROW_DOWN = 40;\r\n        let time: string;\r\n\r\n        if (keyCode === ARROW_UP) {\r\n            time = String(+this.time + (this.minutesGap || 1));\r\n        } else if (keyCode === ARROW_DOWN) {\r\n            time = String(+this.time - (this.minutesGap || 1));\r\n        }\r\n\r\n        if (!isTimeUnavailable(time, this.timeList)) {\r\n            this.time = time;\r\n            this.updateTime();\r\n        }\r\n    }\r\n\r\n}\r\n\r\nfunction isTimeDisabledToChange(currentTime: string, nextTime: string, timeList: ClockFaceTime[]): boolean {\r\n    const isNumber = /\\d/.test(nextTime);\r\n\r\n    if (isNumber) {\r\n        const time = currentTime + nextTime;\r\n        return isTimeUnavailable(time, timeList);\r\n    }\r\n}\r\n\r\nfunction isTimeUnavailable(time: string, timeList: ClockFaceTime[]): boolean {\r\n    const selectedTime = timeList.find(value => value.time === +time);\r\n    return !selectedTime || (selectedTime && selectedTime.disabled);\r\n}\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { animate, sequence, style, transition, trigger } from '@angular/animations';\r\nimport { DateTime } from 'luxon';\r\nimport { disableHours, disableMinutes } from '../../utils/timepicker-time.utils';\r\n\r\n@Component({\r\n    selector: 'ngx-material-timepicker-period',\r\n    templateUrl: 'ngx-material-timepicker-period.component.html',\r\n    styleUrls: ['ngx-material-timepicker-period.component.scss'],\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)'}),\r\n                animate('.2s', style({transform: 'scale(1)'})),\r\n                sequence([\r\n                    animate('3s', style({opacity: 1})),\r\n                    animate('.3s', style({opacity: 0}))\r\n                ])\r\n            ])\r\n        ])\r\n    ]\r\n})\r\nexport class NgxMaterialTimepickerPeriodComponent {\r\n\r\n    timePeriod = TimePeriod;\r\n    isPeriodAvailable = true;\r\n\r\n    @Input() selectedPeriod: TimePeriod;\r\n    @Input() format: number;\r\n    @Input() activeTimeUnit: TimeUnit;\r\n    @Input() hours: ClockFaceTime[];\r\n    @Input() minutes: ClockFaceTime[];\r\n    @Input() minTime: DateTime;\r\n    @Input() maxTime: DateTime;\r\n    @Input() selectedHour: number | string;\r\n    @Input() meridiems: string[];\r\n\r\n    @Output() periodChanged = new EventEmitter<TimePeriod>();\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.isPeriodAvailable = this.isSwitchPeriodAvailable(period);\r\n        if (this.isPeriodAvailable) {\r\n            this.periodChanged.next(period);\r\n        }\r\n    }\r\n\r\n    animationDone(): void {\r\n        this.isPeriodAvailable = true;\r\n    }\r\n\r\n    private isSwitchPeriodAvailable(period: TimePeriod): boolean {\r\n        const time = this.getDisabledTimeByPeriod(period);\r\n        return !time.every(t => t.disabled);\r\n    }\r\n\r\n    private getDisabledTimeByPeriod(period: TimePeriod): ClockFaceTime[] {\r\n        switch (this.activeTimeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return disableHours(this.hours, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            case TimeUnit.MINUTE:\r\n                return disableMinutes(this.minutes, +this.selectedHour, {\r\n                    min: this.minTime,\r\n                    max: this.maxTime,\r\n                    format: this.format,\r\n                    period\r\n                });\r\n            default:\r\n                throw new Error('no such TimeUnit');\r\n        }\r\n    }\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\nimport {DomSanitizer} from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n    name: 'styleSanitizer'\r\n})\r\nexport class StyleSanitizerPipe implements PipeTransform {\r\n\r\n    constructor(private domSanitizer: DomSanitizer) {\r\n    }\r\n\r\n    transform(value: string): any {\r\n        if (!value) {\r\n            return value;\r\n        }\r\n        return this.domSanitizer.bypassSecurityTrustStyle(value);\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\n\r\n@Pipe({\r\n    name: 'timeFormatter'\r\n})\r\nexport class TimeFormatterPipe implements PipeTransform {\r\n\r\n    transform(time: number | string, timeUnit: TimeUnit): any {\r\n        if (time == null || time === '') {\r\n            return time;\r\n        }\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR:\r\n                return DateTime.fromObject({hour: +time}).toFormat('HH');\r\n            case TimeUnit.MINUTE:\r\n                return DateTime.fromObject({minute: +time}).toFormat('mm');\r\n            default:\r\n                throw new Error('no such time unit');\r\n        }\r\n    }\r\n\r\n}\r\n","import {Pipe, PipeTransform} from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'minutesFormatter'\r\n})\r\nexport class MinutesFormatterPipe implements PipeTransform {\r\n\r\n    transform(minute: number, gap = 5): number | string {\r\n        if (!minute) {\r\n            return minute;\r\n        }\r\n\r\n        return minute % gap === 0 ? minute : '';\r\n    }\r\n\r\n}\r\n","import { Component, forwardRef, Inject, Input, OnDestroy, OnInit, TemplateRef } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NgxMaterialTimepickerService } from '../../services/ngx-material-timepicker.service';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ClockFaceTime } from '../../models/clock-face-time.interface';\r\nimport { TimePeriod } from '../../models/time-period.enum';\r\nimport { getHours, getMinutes } from '../../utils/timepicker-time.utils';\r\nimport { TimeUnit } from '../../models/time-unit.enum';\r\nimport { NgxMaterialTimepickerTheme } from '../../models/ngx-material-timepicker-theme.interface';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { TimeAdapter } from '../../services/time-adapter';\r\nimport { TIME_LOCALE } from '../../tokens/time-locale.token';\r\n\r\n@Component({\r\n    selector: 'ngx-timepicker-field',\r\n    templateUrl: './ngx-timepicker-field.component.html',\r\n    styleUrls: ['./ngx-timepicker-field.component.scss'],\r\n    providers: [\r\n        NgxMaterialTimepickerService,\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NgxTimepickerFieldComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NgxTimepickerFieldComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n\r\n    period$: Observable<TimePeriod>;\r\n\r\n    hour: number;\r\n    minute: number;\r\n\r\n    minHour = 1;\r\n    maxHour = 12;\r\n\r\n    timeUnit = TimeUnit;\r\n    timepickerTime: string;\r\n    isDefaultTime: boolean;\r\n\r\n    @Input() disabled: boolean;\r\n    @Input() toggleIcon: TemplateRef<HTMLObjectElement>;\r\n    @Input() buttonAlign: 'right' | 'left' = 'right';\r\n    @Input() clockTheme: NgxMaterialTimepickerTheme;\r\n    @Input() controlOnly: boolean;\r\n    @Input() cancelBtnTmpl: TemplateRef<Node>;\r\n    @Input() confirmBtnTmpl: TemplateRef<Node>;\r\n\r\n    @Input()\r\n    set format(value: number) {\r\n        this._format = value === 24 ? 24 : 12;\r\n        this.minHour = this._format === 12 ? 1 : 0;\r\n        this.maxHour = this._format === 12 ? 12 : 23;\r\n        this.hoursList = getHours(this._format);\r\n        const isDynamicallyChanged = value && (this.previousFormat && this.previousFormat !== this._format);\r\n\r\n        if (isDynamicallyChanged) {\r\n            this.defaultTime = this.timepickerTime;\r\n        }\r\n        this.previousFormat = this._format;\r\n    }\r\n\r\n    get format(): number {\r\n        return this._format;\r\n    }\r\n\r\n\r\n    @Input()\r\n    set defaultTime(val: string) {\r\n        const time = TimeAdapter.formatTime(val, {locale: this.locale, format: this._format});\r\n        this.timepickerService.setDefaultTimeIfAvailable(time, null, null, this._format);\r\n        this._defaultTime = time;\r\n        this.timepickerTime = time;\r\n        this.isDefaultTime = !!time;\r\n    }\r\n\r\n    get defaultTime(): string {\r\n        return this._defaultTime;\r\n    }\r\n\r\n    private _defaultTime: string;\r\n    private _format = 12;\r\n    private previousFormat: number;\r\n\r\n    private hoursList: ClockFaceTime[];\r\n    private minutesList: ClockFaceTime[];\r\n\r\n    private unsubscribe$ = new Subject();\r\n\r\n    private onChange: (value: string) => void = () => {\r\n    }\r\n\r\n    constructor(private timepickerService: NgxMaterialTimepickerService,\r\n                @Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.period$ = this.timepickerService.selectedPeriod;\r\n\r\n        this.timepickerService.selectedHour.pipe(takeUntil(this.unsubscribe$))\r\n            .subscribe(hour => this.hour = hour.time);\r\n\r\n        this.timepickerService.selectedMinute.pipe(takeUntil(this.unsubscribe$))\r\n            .subscribe(minute => this.minute = minute.time);\r\n\r\n        this.hoursList = getHours(this._format);\r\n        this.minutesList = getMinutes();\r\n    }\r\n\r\n    writeValue(val: string): void {\r\n        if (val) {\r\n            this.defaultTime = val;\r\n        }\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChange = fn;\r\n    }\r\n\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    changeHour(hour: number): void {\r\n        this.timepickerService.hour = this.hoursList.find(h => h.time === hour);\r\n        this.changeTime();\r\n    }\r\n\r\n    changeMinute(minute: number): void {\r\n        this.timepickerService.minute = this.minutesList.find(m => m.time === minute);\r\n        this.changeTime();\r\n    }\r\n\r\n    changePeriod(period: TimePeriod): void {\r\n        this.timepickerService.period = period;\r\n        this.changeTime();\r\n    }\r\n\r\n    onTimeSet(time: string): void {\r\n        const localeTime = TimeAdapter.toLocaleTimeString(time, {format: this.format, locale: this.locale});\r\n\r\n        this.defaultTime = time;\r\n        this.onChange(localeTime);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe$.next();\r\n    }\r\n\r\n    private changeTime(): void {\r\n        const time = this.timepickerService.getFullTime(this._format);\r\n        this.timepickerTime = time;\r\n        this.onChange(time);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { isDigit } from '../../../utils/timepicker.utils';\r\nimport { TimeFormatterPipe } from '../../../pipes/time-formatter.pipe';\r\nimport { TimeUnit } from '../../../models/time-unit.enum';\r\nimport { TimeParserPipe } from '../../../pipes/time-parser.pipe';\r\n\r\n@Component({\r\n    selector: 'ngx-timepicker-time-control',\r\n    templateUrl: './ngx-timepicker-time-control.component.html',\r\n    styleUrls: ['./ngx-timepicker-time-control.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    providers: [TimeParserPipe]\r\n})\r\n\r\nexport class NgxTimepickerTimeControlComponent implements OnInit, OnChanges {\r\n\r\n    @Input() time: number;\r\n    @Input() min: number;\r\n    @Input() max: number;\r\n    @Input() placeholder: string;\r\n    @Input() timeUnit: TimeUnit;\r\n    @Input() disabled: boolean;\r\n    @Input() isDefaultTimeSet: boolean;\r\n\r\n    @Output() timeChanged = new EventEmitter<number>();\r\n\r\n    isFocused: boolean;\r\n\r\n    constructor(private timeParser: TimeParserPipe) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        if (this.isDefaultTimeSet) {\r\n            this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        const timeChanges = changes['time'];\r\n        const isTimeNotProvided = timeChanges && timeChanges.isFirstChange() && !this.isDefaultTimeSet;\r\n\r\n        if (isTimeNotProvided) {\r\n            this.time = null;\r\n        }\r\n    }\r\n\r\n    onKeydown(event: KeyboardEvent): void {\r\n        if (!isDigit(event)) {\r\n            event.preventDefault();\r\n        }\r\n\r\n        switch (event.key) {\r\n            case 'ArrowUp':\r\n                this.increase();\r\n                break;\r\n            case 'ArrowDown':\r\n                this.decrease();\r\n                break;\r\n        }\r\n    }\r\n\r\n    increase(): void {\r\n        if (!this.disabled) {\r\n            let nextTime = +this.time + 1;\r\n\r\n            if (nextTime > this.max) {\r\n                nextTime = this.min;\r\n            }\r\n\r\n            this.timeChanged.emit(nextTime);\r\n        }\r\n    }\r\n\r\n    decrease(): void {\r\n        if (!this.disabled) {\r\n            let previousTime = +this.time - 1;\r\n\r\n            if (previousTime < this.min) {\r\n                previousTime = this.max;\r\n            }\r\n\r\n            this.timeChanged.emit(previousTime);\r\n        }\r\n    }\r\n\r\n    onInput(input: HTMLInputElement) {\r\n        const value = parseInt(input.value, 10);\r\n\r\n        if (!isNaN(value)) {\r\n            this.time = value;\r\n\r\n            if (this.time > this.max) {\r\n                this.time = +String(value)[0];\r\n            }\r\n\r\n            if (this.time < this.min) {\r\n                this.time = this.min;\r\n            }\r\n\r\n            input.value = String(this.time);\r\n            this.timeChanged.emit(this.time);\r\n        }\r\n\r\n    }\r\n\r\n    onFocus(): void {\r\n        this.isFocused = true;\r\n    }\r\n\r\n    onBlur(): void {\r\n        this.time = new TimeFormatterPipe().transform(this.time, this.timeUnit);\r\n        this.isFocused = false;\r\n    }\r\n\r\n    onModelChange(value: string): void {\r\n        this.time = +this.timeParser.transform(value, this.timeUnit);\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output } from '@angular/core';\r\nimport { TimePeriod } from '../../../models/time-period.enum';\r\nimport { animate, style, transition, trigger } from '@angular/animations';\r\nimport { TIME_LOCALE } from '../../../tokens/time-locale.token';\r\nimport { Info } from 'luxon';\r\n\r\n@Component({\r\n    selector: 'ngx-timepicker-period-selector',\r\n    templateUrl: 'ngx-timepicker-period-selector.component.html',\r\n    styleUrls: ['./ngx-timepicker-period-selector.component.scss'],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    animations: [\r\n        trigger('scaleInOut', [\r\n            transition(':enter', [\r\n                style({transform: 'scale(0)', opacity: 0}),\r\n                animate(200, style({transform: 'scale(1)', opacity: 1}))\r\n            ]),\r\n            transition(':leave', [\r\n                animate(200, style({transform: 'scale(0)', opacity: 0}))\r\n            ])\r\n        ])\r\n    ]\r\n})\r\n\r\nexport class NgxTimepickerPeriodSelectorComponent {\r\n\r\n    @Input() isOpened: boolean;\r\n    @Input() disabled: boolean;\r\n    @Input()\r\n    set selectedPeriod(period: TimePeriod) {\r\n        if (period) {\r\n            const periods = [TimePeriod.AM, TimePeriod.PM];\r\n            this.localizedPeriod = this.meridiems[periods.indexOf(period)];\r\n        }\r\n    }\r\n\r\n    @Output() periodSelected = new EventEmitter<TimePeriod>();\r\n\r\n    period = TimePeriod;\r\n    meridiems = Info.meridiems({locale: this.locale});\r\n    localizedPeriod: string;\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    open(): void {\r\n        if (!this.disabled) {\r\n            this.isOpened = true;\r\n        }\r\n    }\r\n\r\n    select(period: TimePeriod): void {\r\n        this.periodSelected.next(period);\r\n        this.isOpened = false;\r\n    }\r\n\r\n    backdropClick(): void {\r\n        this.isOpened = false;\r\n    }\r\n}\r\n","import { Inject, Pipe, PipeTransform } from '@angular/core';\r\nimport { TIME_LOCALE } from '../tokens/time-locale.token';\r\nimport { TimeUnit } from '../models/time-unit.enum';\r\nimport { DateTime } from 'luxon';\r\n\r\ntype TimeMeasure = 'hour' | 'minute';\r\n\r\n@Pipe({\r\n    name: 'timeLocalizer'\r\n})\r\nexport class TimeLocalizerPipe implements PipeTransform {\r\n\r\n    constructor(@Inject(TIME_LOCALE) private locale: string) {\r\n    }\r\n\r\n    transform(time: number | string, timeUnit: TimeUnit): string {\r\n        if (time == null || time === '') {\r\n            return '';\r\n        }\r\n\r\n        switch (timeUnit) {\r\n            case TimeUnit.HOUR: {\r\n                const format = time === 0 ? 'HH' : 'H';\r\n                return this.formatTime('hour', time, format);\r\n            }\r\n            case TimeUnit.MINUTE:\r\n                return this.formatTime('minute', time, 'mm');\r\n            default:\r\n                throw new Error(`There is no Time Unit with type ${timeUnit}`);\r\n        }\r\n    }\r\n\r\n    private formatTime(timeMeasure: TimeMeasure, time: string | number, format: string): string {\r\n        try {\r\n            return DateTime.fromObject({[timeMeasure]: +time}).setLocale(this.locale).toFormat(format);\r\n        } catch {\r\n            throw new Error(`Cannot format provided time - ${time} to locale - ${this.locale}`);\r\n        }\r\n    }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeHour'\r\n})\r\nexport class ActiveHourPipe implements PipeTransform {\r\n\r\n    transform(hour: number, currentHour: number, isClockFaceDisabled: boolean): boolean {\r\n        if (hour == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n\r\n        return hour === currentHour;\r\n    }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'activeMinute'\r\n})\r\nexport class ActiveMinutePipe implements PipeTransform {\r\n\r\n    transform(minute: number, currentMinute: number, gap: number, isClockFaceDisabled: boolean): boolean {\r\n        if (minute == null || isClockFaceDisabled) {\r\n            return false;\r\n        }\r\n        const defaultGap = 5;\r\n\r\n        return ((currentMinute === minute) && (minute % (gap || defaultGap) === 0));\r\n    }\r\n\r\n}\r\n","import {Directive, ElementRef, Inject, Input, OnChanges, OnDestroy, Optional} from '@angular/core';\r\nimport {DOCUMENT} from '@angular/common';\r\n\r\n@Directive({\r\n    selector: '[timepickerAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnChanges, OnDestroy {\r\n\r\n    @Input('timepickerAutofocus') isFocusActive: boolean;\r\n\r\n    private activeElement: HTMLElement;\r\n\r\n    constructor(private element: ElementRef, @Optional() @Inject(DOCUMENT) private document: any) {\r\n        this.activeElement = this.document.activeElement;\r\n    }\r\n\r\n    ngOnChanges() {\r\n        if (this.isFocusActive) {\r\n            // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n            setTimeout(() => this.element.nativeElement.focus({ preventScroll: true }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        // To avoid ExpressionChangedAfterItHasBeenCheckedError;\r\n        setTimeout(() => this.activeElement.focus({ preventScroll: true }));\r\n    }\r\n}\r\n","import { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgxMaterialTimepickerComponent } from './ngx-material-timepicker.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { NgxMaterialTimepickerToggleComponent } from './components/timepicker-toggle-button/ngx-material-timepicker-toggle.component';\r\nimport { TimepickerDirective } from './directives/ngx-timepicker.directive';\r\nimport { NgxMaterialTimepickerToggleIconDirective } from './directives/ngx-material-timepicker-toggle-icon.directive';\r\nimport { NgxMaterialTimepickerThemeDirective } from './directives/ngx-material-timepicker-theme.directive';\r\nimport {\r\n  NgxMaterialTimepicker24HoursFaceComponent\r\n} from './components/timepicker-24-hours-face/ngx-material-timepicker-24-hours-face.component';\r\nimport {\r\n  NgxMaterialTimepicker12HoursFaceComponent\r\n} from './components/timepicker-12-hours-face/ngx-material-timepicker-12-hours-face.component';\r\nimport {\r\n  NgxMaterialTimepickerMinutesFaceComponent\r\n} from './components/timepicker-minutes-face/ngx-material-timepicker-minutes-face.component';\r\nimport { NgxMaterialTimepickerFaceComponent } from './components/timepicker-face/ngx-material-timepicker-face.component';\r\nimport { NgxMaterialTimepickerButtonComponent } from './components/timepicker-button/ngx-material-timepicker-button.component';\r\nimport { NgxMaterialTimepickerDialComponent } from './components/timepicker-dial/ngx-material-timepicker-dial.component';\r\nimport {\r\n  NgxMaterialTimepickerDialControlComponent\r\n} from './components/timepicker-dial-control/ngx-material-timepicker-dial-control.component';\r\nimport { NgxMaterialTimepickerPeriodComponent } from './components/timepicker-period/ngx-material-timepicker-period.component';\r\nimport { StyleSanitizerPipe } from './pipes/style-sanitizer.pipe';\r\nimport { TimeFormatterPipe } from './pipes/time-formatter.pipe';\r\nimport { MinutesFormatterPipe } from './pipes/minutes-formatter.pipe';\r\nimport { NgxTimepickerFieldComponent } from './components/timepicker-field/ngx-timepicker-field.component';\r\nimport {\r\n  NgxTimepickerTimeControlComponent\r\n} from './components/timepicker-field/timepicker-time-control/ngx-timepicker-time-control.component';\r\nimport {\r\n  NgxTimepickerPeriodSelectorComponent\r\n} from './components/timepicker-field/timepicker-period-selector/ngx-timepicker-period-selector.component';\r\nimport { TimeLocalizerPipe } from './pipes/time-localizer.pipe';\r\nimport { TIME_LOCALE } from './tokens/time-locale.token';\r\nimport { TimeAdapter } from './services/time-adapter';\r\nimport { TimeParserPipe } from './pipes/time-parser.pipe';\r\nimport { ActiveHourPipe } from './pipes/active-hour.pipe';\r\nimport { ActiveMinutePipe } from './pipes/active-minute.pipe';\r\nimport {\r\n  NgxMaterialTimepickerContentComponent\r\n} from './components/ngx-material-timepicker-content/ngx-material-timepicker-content.component';\r\nimport { PortalModule } from '@angular/cdk/portal';\r\nimport { OverlayModule } from '@angular/cdk/overlay';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    PortalModule,\r\n    OverlayModule\r\n  ],\r\n  exports: [\r\n    NgxMaterialTimepickerComponent,\r\n    NgxMaterialTimepickerToggleComponent,\r\n    NgxTimepickerFieldComponent,\r\n    TimepickerDirective,\r\n    NgxMaterialTimepickerToggleIconDirective,\r\n    NgxMaterialTimepickerThemeDirective\r\n  ],\r\n  declarations: [\r\n    AutofocusDirective,\r\n    NgxMaterialTimepickerComponent,\r\n    NgxMaterialTimepicker24HoursFaceComponent,\r\n    NgxMaterialTimepicker12HoursFaceComponent,\r\n    NgxMaterialTimepickerMinutesFaceComponent,\r\n    NgxMaterialTimepickerFaceComponent,\r\n    NgxMaterialTimepickerToggleComponent,\r\n    NgxMaterialTimepickerButtonComponent,\r\n    NgxMaterialTimepickerDialComponent,\r\n    NgxMaterialTimepickerDialControlComponent,\r\n    NgxMaterialTimepickerPeriodComponent,\r\n    StyleSanitizerPipe,\r\n    TimeFormatterPipe,\r\n    TimepickerDirective,\r\n    NgxMaterialTimepickerToggleIconDirective,\r\n    MinutesFormatterPipe,\r\n    NgxMaterialTimepickerThemeDirective,\r\n    NgxTimepickerFieldComponent,\r\n    NgxTimepickerTimeControlComponent,\r\n    NgxTimepickerPeriodSelectorComponent,\r\n    TimeLocalizerPipe,\r\n    TimeParserPipe,\r\n    ActiveHourPipe,\r\n    ActiveMinutePipe,\r\n    NgxMaterialTimepickerContentComponent\r\n  ],\r\n  providers: [\r\n    { provide: TIME_LOCALE, useValue: TimeAdapter.DEFAULT_LOCALE }\r\n  ],\r\n  entryComponents: [NgxMaterialTimepickerContentComponent]\r\n})\r\nexport class NgxMaterialTimepickerModule {\r\n\r\n  static setLocale(locale: string): ModuleWithProviders {\r\n    return {\r\n      ngModule: NgxMaterialTimepickerModule,\r\n      providers: [\r\n        { provide: TIME_LOCALE, useValue: locale }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}